{"abi":[{"type":"function","name":"claimStakedShares","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"claimUnstakedAssets","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimStakedShares(bytes32)":"4a1daaef","claimUnstakedAssets(bytes32)":"0f83d6d9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"claimStakedShares\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"claimUnstakedAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface defines the final phase of the two-phase staking/unstaking system where users collect their rewards after batch settlement. The claiming mechanism operates after batches have been settled by kAssetRouter with finalized share prices and yield calculations. Key features include: (1) Share Distribution: For staking claims, users receive stkTokens at the settled share price reflecting vault performance during the batch period, (2) Asset Distribution: For unstaking claims, users receive kTokens (including accrued yield) distributed through batch-specific receiver contracts, (3) Request Validation: Claims are validated against original requests to ensure only authorized recipients can claim, (4) State Management: Claimed requests are marked to prevent double-claiming while maintaining audit trails. The two-phase approach (request \\u2192 claim) provides several advantages: fair pricing through synchronized settlement, gas efficiency by separating request processing from asset distribution, security through settled price finalization, and operational flexibility for users to claim rewards at their convenience after settlement.\",\"kind\":\"dev\",\"methods\":{\"claimStakedShares(bytes32)\":{\"details\":\"This function completes the staking process by distributing stkTokens to users after batch settlement. Process: (1) Validates batch has been settled and share prices are finalized to ensure accurate distribution, (2) Verifies request ownership and pending status to prevent unauthorized or duplicate claims, (3) Calculates stkToken amount based on original kToken deposit and settled net share price (after fees), (4) Mints stkTokens to specified recipient reflecting their proportional vault ownership, (5) Marks request as claimed to prevent future reprocessing. The net share price accounts for management and performance fees, ensuring users receive their accurate yield-adjusted position. stkTokens are ERC20-compatible shares that continue accruing yield through share price appreciation until unstaking.\",\"params\":{\"requestId\":\"The specific staking request identifier to claim rewards for\"}},\"claimUnstakedAssets(bytes32)\":{\"details\":\"This function completes the unstaking process by distributing redeemed assets to users after settlement. Process: (1) Validates batch settlement and asset distribution readiness through batch receiver verification, (2) Confirms request ownership and pending status to ensure authorized claiming, (3) Calculates kToken amount based on original stkToken redemption and settled share price including yield, (4) Burns locked stkTokens that were held during settlement period, (5) Triggers batch receiver to transfer calculated kTokens to recipient, (6) Marks request as claimed completing the unstaking cycle. The batch receiver pattern ensures asset isolation between settlement periods while enabling efficient distribution. Users receive their original investment plus proportional share of vault yields earned during their staking period.\",\"params\":{\"requestId\":\"The specific unstaking request identifier to claim assets for\"}}},\"title\":\"IVaultClaim\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimStakedShares(bytes32)\":{\"notice\":\"Claims stkTokens from a settled staking batch at the finalized share price\"},\"claimUnstakedAssets(bytes32)\":{\"notice\":\"Claims kTokens plus accrued yield from a settled unstaking batch through batch receiver distribution\"}},\"notice\":\"Interface for claiming settled staking rewards and unstaking assets after batch processing completion\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IVaultClaim.sol\":\"IVaultClaim\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":kam/src/=src/\",\":kam/test/=test/\",\":openzeppelin/=src/vendor/openzeppelin/\",\":solady/=src/vendor/solady/\",\":uniswap/=src/vendor/uniswap/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IVaultClaim.sol\":{\"keccak256\":\"0xbc8653ba55535db7f9f97636eefbaac39aee5940358b8dbf374c6dd49029cf90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fe53e06a6eeb51f74856ef36061939830f4bd36cac7cea57797d251aa8958b0\",\"dweb:/ipfs/Qmbsd3B9CFBdGhdtMnycY85CKFx9mfqQN2ML6quGZiP8Zk\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"claimStakedShares"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"claimUnstakedAssets"}],"devdoc":{"kind":"dev","methods":{"claimStakedShares(bytes32)":{"details":"This function completes the staking process by distributing stkTokens to users after batch settlement. Process: (1) Validates batch has been settled and share prices are finalized to ensure accurate distribution, (2) Verifies request ownership and pending status to prevent unauthorized or duplicate claims, (3) Calculates stkToken amount based on original kToken deposit and settled net share price (after fees), (4) Mints stkTokens to specified recipient reflecting their proportional vault ownership, (5) Marks request as claimed to prevent future reprocessing. The net share price accounts for management and performance fees, ensuring users receive their accurate yield-adjusted position. stkTokens are ERC20-compatible shares that continue accruing yield through share price appreciation until unstaking.","params":{"requestId":"The specific staking request identifier to claim rewards for"}},"claimUnstakedAssets(bytes32)":{"details":"This function completes the unstaking process by distributing redeemed assets to users after settlement. Process: (1) Validates batch settlement and asset distribution readiness through batch receiver verification, (2) Confirms request ownership and pending status to ensure authorized claiming, (3) Calculates kToken amount based on original stkToken redemption and settled share price including yield, (4) Burns locked stkTokens that were held during settlement period, (5) Triggers batch receiver to transfer calculated kTokens to recipient, (6) Marks request as claimed completing the unstaking cycle. The batch receiver pattern ensures asset isolation between settlement periods while enabling efficient distribution. Users receive their original investment plus proportional share of vault yields earned during their staking period.","params":{"requestId":"The specific unstaking request identifier to claim assets for"}}},"version":1},"userdoc":{"kind":"user","methods":{"claimStakedShares(bytes32)":{"notice":"Claims stkTokens from a settled staking batch at the finalized share price"},"claimUnstakedAssets(bytes32)":{"notice":"Claims kTokens plus accrued yield from a settled unstaking batch through batch receiver distribution"}},"version":1}},"settings":{"remappings":["forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/","forge-std/=dependencies/forge-std-1.9.7/src/","kam/src/=src/","kam/test/=test/","openzeppelin/=src/vendor/openzeppelin/","solady/=src/vendor/solady/","uniswap/=src/vendor/uniswap/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IVaultClaim.sol":"IVaultClaim"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IVaultClaim.sol":{"keccak256":"0xbc8653ba55535db7f9f97636eefbaac39aee5940358b8dbf374c6dd49029cf90","urls":["bzz-raw://3fe53e06a6eeb51f74856ef36061939830f4bd36cac7cea57797d251aa8958b0","dweb:/ipfs/Qmbsd3B9CFBdGhdtMnycY85CKFx9mfqQN2ML6quGZiP8Zk"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IVaultClaim.sol","id":50393,"exportedSymbols":{"IVaultClaim":[50392]},"nodeType":"SourceUnit","src":"32:3702:46","nodes":[{"id":50378,"nodeType":"PragmaDirective","src":"32:23:46","nodes":[],"literals":["solidity","^","0.8",".4"]},{"id":50392,"nodeType":"ContractDefinition","src":"1392:2341:46","nodes":[{"id":50385,"nodeType":"FunctionDefinition","src":"2477:63:46","nodes":[],"documentation":{"id":50380,"nodeType":"StructuredDocumentation","src":"1420:1052:46","text":"@notice Claims stkTokens from a settled staking batch at the finalized share price\n @dev This function completes the staking process by distributing stkTokens to users after batch settlement.\n Process: (1) Validates batch has been settled and share prices are finalized to ensure accurate distribution,\n (2) Verifies request ownership and pending status to prevent unauthorized or duplicate claims, (3) Calculates\n stkToken amount based on original kToken deposit and settled net share price (after fees), (4) Mints stkTokens\n to specified recipient reflecting their proportional vault ownership, (5) Marks request as claimed to prevent\n future reprocessing. The net share price accounts for management and performance fees, ensuring users receive\n their accurate yield-adjusted position. stkTokens are ERC20-compatible shares that continue accruing yield\n through share price appreciation until unstaking.\n @param requestId The specific staking request identifier to claim rewards for"},"functionSelector":"4a1daaef","implemented":false,"kind":"function","modifiers":[],"name":"claimStakedShares","nameLocation":"2486:17:46","parameters":{"id":50383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50382,"mutability":"mutable","name":"requestId","nameLocation":"2512:9:46","nodeType":"VariableDeclaration","scope":50385,"src":"2504:17:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":50381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2504:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2503:19:46"},"returnParameters":{"id":50384,"nodeType":"ParameterList","parameters":[],"src":"2539:0:46"},"scope":50392,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":50391,"nodeType":"FunctionDefinition","src":"3666:65:46","nodes":[],"documentation":{"id":50386,"nodeType":"StructuredDocumentation","src":"2546:1115:46","text":"@notice Claims kTokens plus accrued yield from a settled unstaking batch through batch receiver distribution\n @dev This function completes the unstaking process by distributing redeemed assets to users after settlement.\n Process: (1) Validates batch settlement and asset distribution readiness through batch receiver verification,\n (2) Confirms request ownership and pending status to ensure authorized claiming, (3) Calculates kToken amount\n based on original stkToken redemption and settled share price including yield, (4) Burns locked stkTokens\n that were held during settlement period, (5) Triggers batch receiver to transfer calculated kTokens to\n recipient,\n (6) Marks request as claimed completing the unstaking cycle. The batch receiver pattern ensures asset isolation\n between settlement periods while enabling efficient distribution. Users receive their original investment plus\n proportional share of vault yields earned during their staking period.\n @param requestId The specific unstaking request identifier to claim assets for"},"functionSelector":"0f83d6d9","implemented":false,"kind":"function","modifiers":[],"name":"claimUnstakedAssets","nameLocation":"3675:19:46","parameters":{"id":50389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50388,"mutability":"mutable","name":"requestId","nameLocation":"3703:9:46","nodeType":"VariableDeclaration","scope":50391,"src":"3695:17:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":50387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3695:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3694:19:46"},"returnParameters":{"id":50390,"nodeType":"ParameterList","parameters":[],"src":"3730:0:46"},"scope":50392,"stateMutability":"payable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IVaultClaim","contractDependencies":[],"contractKind":"interface","documentation":{"id":50379,"nodeType":"StructuredDocumentation","src":"57:1335:46","text":"@title IVaultClaim\n @notice Interface for claiming settled staking rewards and unstaking assets after batch processing completion\n @dev This interface defines the final phase of the two-phase staking/unstaking system where users collect\n their rewards after batch settlement. The claiming mechanism operates after batches have been settled by\n kAssetRouter with finalized share prices and yield calculations. Key features include: (1) Share Distribution:\n For staking claims, users receive stkTokens at the settled share price reflecting vault performance during\n the batch period, (2) Asset Distribution: For unstaking claims, users receive kTokens (including accrued yield)\n distributed through batch-specific receiver contracts, (3) Request Validation: Claims are validated against\n original requests to ensure only authorized recipients can claim, (4) State Management: Claimed requests are\n marked to prevent double-claiming while maintaining audit trails. The two-phase approach (request → claim)\n provides several advantages: fair pricing through synchronized settlement, gas efficiency by separating request\n processing from asset distribution, security through settled price finalization, and operational flexibility\n for users to claim rewards at their convenience after settlement."},"fullyImplemented":false,"linearizedBaseContracts":[50392],"name":"IVaultClaim","nameLocation":"1402:11:46","scope":50393,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":46}