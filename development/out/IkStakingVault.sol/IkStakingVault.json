{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"asset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"burnFees","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"cancelStakeRequest","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"cancelUnstakeRequest","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"claimStakedShares","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"claimUnstakedAssets","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"closeBatch","inputs":[{"name":"_batchId","type":"bytes32","internalType":"bytes32"},{"name":"_create","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"computeLastBatchFees","inputs":[],"outputs":[{"name":"managementFees","type":"uint256","internalType":"uint256"},{"name":"performanceFees","type":"uint256","internalType":"uint256"},{"name":"totalFees","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"contractName","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"contractVersion","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"convertToAssets","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"convertToAssetsWithTotals","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"totalAssets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"convertToShares","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"convertToSharesWithTotals","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"totalAssets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"createNewBatch","inputs":[],"outputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"getBatchId","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBatchIdInfo","inputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"batchReceiver","type":"address","internalType":"address"},{"name":"isClosed","type":"bool","internalType":"bool"},{"name":"isSettled","type":"bool","internalType":"bool"},{"name":"sharePrice","type":"uint256","internalType":"uint256"},{"name":"netSharePrice","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBatchReceiver","inputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBatchInfo","inputs":[],"outputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"},{"name":"batchReceiver","type":"address","internalType":"address"},{"name":"isClosed","type":"bool","internalType":"bool"},{"name":"isSettled","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getSafeBatchId","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getSafeBatchReceiver","inputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getStakeRequest","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"stakeRequest","type":"tuple","internalType":"struct BaseVaultTypes.StakeRequest","components":[{"name":"user","type":"address","internalType":"address"},{"name":"kTokenAmount","type":"uint128","internalType":"uint128"},{"name":"recipient","type":"address","internalType":"address"},{"name":"batchId","type":"bytes32","internalType":"bytes32"},{"name":"requestTimestamp","type":"uint64","internalType":"uint64"},{"name":"status","type":"uint8","internalType":"enum BaseVaultTypes.RequestStatus"}]}],"stateMutability":"view"},{"type":"function","name":"getTotalPendingStake","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUnstakeRequest","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"unstakeRequest","type":"tuple","internalType":"struct BaseVaultTypes.UnstakeRequest","components":[{"name":"user","type":"address","internalType":"address"},{"name":"stkTokenAmount","type":"uint128","internalType":"uint128"},{"name":"recipient","type":"address","internalType":"address"},{"name":"batchId","type":"bytes32","internalType":"bytes32"},{"name":"requestTimestamp","type":"uint64","internalType":"uint64"},{"name":"status","type":"uint8","internalType":"enum BaseVaultTypes.RequestStatus"}]}],"stateMutability":"view"},{"type":"function","name":"getUserRequests","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"requestIds","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"view"},{"type":"function","name":"hurdleRate","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"isBatchClosed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isBatchSettled","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isClosed","inputs":[{"name":"batchId_","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"isClosed_","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isHardHurdleRate","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lastFeesChargedManagement","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"lastFeesChargedPerformance","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"managementFee","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"netSharePrice","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"nextManagementFeeTimestamp","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"nextPerformanceFeeTimestamp","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"notifyManagementFeesCharged","inputs":[{"name":"_timestamp","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"notifyPerformanceFeesCharged","inputs":[{"name":"_timestamp","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"performanceFee","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"registry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"requestStake","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"kTokensAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"requestUnstake","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"stkTokenAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"setHardHurdleRate","inputs":[{"name":"_isHard","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setManagementFee","inputs":[{"name":"_managementFee","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxTotalAssets","inputs":[{"name":"maxTotalAssets_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setPaused","inputs":[{"name":"paused_","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setPerformanceFee","inputs":[{"name":"_performanceFee","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"settleBatch","inputs":[{"name":"_batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"sharePrice","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"sharePriceWatermark","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalNetAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"underlyingAsset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","asset()":"38d52e0f","balanceOf(address)":"70a08231","burnFees(uint256)":"0342a6ba","cancelStakeRequest(bytes32)":"d3856009","cancelUnstakeRequest(bytes32)":"3c138a92","claimStakedShares(bytes32)":"4a1daaef","claimUnstakedAssets(bytes32)":"0f83d6d9","closeBatch(bytes32,bool)":"bb507ab9","computeLastBatchFees()":"cf0597ed","contractName()":"75d0c0dc","contractVersion()":"a0a8e460","convertToAssets(uint256)":"07a2d13a","convertToAssetsWithTotals(uint256,uint256)":"9ff217fe","convertToShares(uint256)":"c6e6f592","convertToSharesWithTotals(uint256,uint256)":"ef3066d4","createNewBatch()":"1875e8f5","decimals()":"313ce567","getBatchId()":"7b27b9ee","getBatchIdInfo(bytes32)":"aa2e3343","getBatchReceiver(bytes32)":"befe3170","getCurrentBatchInfo()":"72674eb6","getSafeBatchId()":"5308394f","getSafeBatchReceiver(bytes32)":"5e3d5f7f","getStakeRequest(bytes32)":"ac219343","getTotalPendingStake()":"4389a279","getUnstakeRequest(bytes32)":"a625e721","getUserRequests(address)":"b337cf74","hurdleRate()":"8297f431","isBatchClosed()":"78e36ac9","isBatchSettled()":"b5e9f485","isClosed(bytes32)":"40aa1f40","isHardHurdleRate()":"07fee228","lastFeesChargedManagement()":"8d5c009a","lastFeesChargedPerformance()":"d0395ddb","managementFee()":"a6f7f5d6","name()":"06fdde03","netSharePrice()":"b1791c0d","nextManagementFeeTimestamp()":"52b09688","nextPerformanceFeeTimestamp()":"77f00194","notifyManagementFeesCharged(uint64)":"39d14dce","notifyPerformanceFeesCharged(uint64)":"9c8af15f","owner()":"8da5cb5b","performanceFee()":"87788782","registry()":"7b103999","requestStake(address,uint256)":"58c2fd00","requestUnstake(address,uint256)":"710ba631","setHardHurdleRate(bool)":"c0b1b037","setManagementFee(uint16)":"8dd09af3","setMaxTotalAssets(uint256)":"bc2e47b7","setPaused(bool)":"16c38b3c","setPerformanceFee(uint16)":"aa290e6d","settleBatch(bytes32)":"eeb8f2b5","sharePrice()":"87269729","sharePriceWatermark()":"34a44bd5","symbol()":"95d89b41","totalAssets()":"01e1d114","totalNetAssets()":"890a8c4f","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","underlyingAsset()":"7158da7c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"burnFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"cancelStakeRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"cancelUnstakeRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"claimStakedShares\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"claimUnstakedAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_create\",\"type\":\"bool\"}],\"name\":\"closeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeLastBatchFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"managementFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"}],\"name\":\"convertToAssetsWithTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"}],\"name\":\"convertToSharesWithTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNewBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"name\":\"getBatchIdInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"batchReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netSharePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"name\":\"getBatchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBatchInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"batchReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"name\":\"getSafeBatchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getStakeRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"kTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"requestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum BaseVaultTypes.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BaseVaultTypes.StakeRequest\",\"name\":\"stakeRequest\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getUnstakeRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"stkTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"requestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum BaseVaultTypes.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BaseVaultTypes.UnstakeRequest\",\"name\":\"unstakeRequest\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRequests\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"requestIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hurdleRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBatchClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBatchSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId_\",\"type\":\"bytes32\"}],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isClosed_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHardHurdleRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeesChargedManagement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeesChargedPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextManagementFeeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPerformanceFeeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"name\":\"notifyManagementFeesCharged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"name\":\"notifyPerformanceFeesCharged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"kTokensAmount\",\"type\":\"uint256\"}],\"name\":\"requestStake\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stkTokenAmount\",\"type\":\"uint256\"}],\"name\":\"requestUnstake\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isHard\",\"type\":\"bool\"}],\"name\":\"setHardHurdleRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_managementFee\",\"type\":\"uint16\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTotalAssets_\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_performanceFee\",\"type\":\"uint16\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"settleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePriceWatermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNetAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface aggregates all kStakingVault functionality by extending IVault (staking/batch/claims/fees) and IVaultReader (state queries) while adding standard ERC20 operations for stkToken management. The interface provides a complete view of vault capabilities: (1) Staking Operations: Full request/claim lifecycle for retail users, (2) Batch Management: Lifecycle control for settlement periods, (3) Share Tokens: Standard ERC20 functionality for stkTokens that accrue yield, (4) State Reading: Comprehensive vault metrics and calculations, (5) Fee Management: Performance and management fee configuration. This unified interface enables complete vault interaction through a single contract, simplifying integration for front-ends and external protocols while maintaining modularity through interface composition. The combination of vault-specific operations with standard ERC20 compatibility ensures stkTokens work seamlessly with existing DeFi infrastructure while providing specialized staking functionality.\",\"kind\":\"dev\",\"methods\":{\"asset()\":{\"returns\":{\"_0\":\"Address of this vault's stkToken contract representing user shares\"}},\"burnFees(uint256)\":{\"details\":\"This function is only callable by the admin\",\"params\":{\"shares\":\"The amount of shares to burn\"}},\"cancelStakeRequest(bytes32)\":{\"details\":\"This function allows users to reverse their staking request before batch processing by: (1) Validating the request exists, belongs to the caller, and remains in pending status, (2) Checking the associated batch hasn't been closed or settled to prevent manipulation of finalized operations, (3) Updating request status to cancelled and removing from user's active requests tracking, (4) Reducing total pending stake amount to maintain accurate vault accounting, (5) Notifying kAssetRouter to reverse the virtual asset movement from staking vault back to DN vault, ensuring proper asset allocation, (6) Returning the originally deposited kTokens to the user's address. This cancellation mechanism provides flexibility for users who change their mind or need immediate liquidity before the batch settlement occurs. The operation is only valid during the open batch period before closure by relayers.\",\"params\":{\"requestId\":\"The unique identifier of the stake request to cancel (must be owned by caller)\"}},\"cancelUnstakeRequest(bytes32)\":{\"details\":\"This function allows users to reverse their unstaking request before batch processing by: (1) Validating the request exists, belongs to the caller, and remains in pending status, (2) Checking the associated batch hasn't been closed or settled to prevent reversal of finalized operations, (3) Updating request status to cancelled and removing from user's active requests tracking, (4) Notifying kAssetRouter to reverse the share redemption request, maintaining proper share accounting across the protocol, (5) Returning the originally transferred stkTokens from the vault back to the user's address. This cancellation mechanism enables users to maintain their staked position if market conditions change or they reconsider their unstaking decision. The stkTokens are returned without any yield impact since the batch hasn't settled. The operation is only valid during the open batch period before closure by relayers.\",\"params\":{\"requestId\":\"The unique identifier of the unstake request to cancel (must be owned by caller)\"}},\"claimStakedShares(bytes32)\":{\"details\":\"This function completes the staking process by distributing stkTokens to users after batch settlement. Process: (1) Validates batch has been settled and share prices are finalized to ensure accurate distribution, (2) Verifies request ownership and pending status to prevent unauthorized or duplicate claims, (3) Calculates stkToken amount based on original kToken deposit and settled net share price (after fees), (4) Mints stkTokens to specified recipient reflecting their proportional vault ownership, (5) Marks request as claimed to prevent future reprocessing. The net share price accounts for management and performance fees, ensuring users receive their accurate yield-adjusted position. stkTokens are ERC20-compatible shares that continue accruing yield through share price appreciation until unstaking.\",\"params\":{\"requestId\":\"The specific staking request identifier to claim rewards for\"}},\"claimUnstakedAssets(bytes32)\":{\"details\":\"This function completes the unstaking process by distributing redeemed assets to users after settlement. Process: (1) Validates batch settlement and asset distribution readiness through batch receiver verification, (2) Confirms request ownership and pending status to ensure authorized claiming, (3) Calculates kToken amount based on original stkToken redemption and settled share price including yield, (4) Burns locked stkTokens that were held during settlement period, (5) Triggers batch receiver to transfer calculated kTokens to recipient, (6) Marks request as claimed completing the unstaking cycle. The batch receiver pattern ensures asset isolation between settlement periods while enabling efficient distribution. Users receive their original investment plus proportional share of vault yields earned during their staking period.\",\"params\":{\"requestId\":\"The specific unstaking request identifier to claim assets for\"}},\"closeBatch(bytes32,bool)\":{\"details\":\"This function transitions a batch from open to closed state, finalizing the request set for settlement. Process: (1) Validates batch exists and is currently open to prevent double-closing, (2) Marks batch as closed preventing new stake/unstake requests from joining, (3) Optionally creates new batch for continued operations if _create flag is true, enabling seamless transitions. Once closed, the batch awaits settlement by kAssetRouter which will calculate final share prices and distribute yields. Only relayers can execute batch closure as part of the coordinated settlement schedule across all protocol vaults. The timing typically aligns with DN vault yield calculations to ensure accurate price discovery.\",\"params\":{\"_batchId\":\"The specific batch identifier to close (must be currently open)\",\"_create\":\"Whether to immediately create a new batch after closing for continued operations\"}},\"computeLastBatchFees()\":{\"details\":\"Computes real-time fee accruals based on time elapsed and vault performance since last fee charge. Management fees accrue continuously based on assets under management and time passed. Performance fees are calculated on share price appreciation above watermarks and hurdle rates. This function provides accurate fee projections for settlement planning and user transparency without modifying state.\",\"returns\":{\"managementFees\":\"Accrued management fees in underlying asset terms\",\"performanceFees\":\"Accrued performance fees in underlying asset terms\",\"totalFees\":\"Combined management and performance fees for total fee burden\"}},\"contractName()\":{\"details\":\"Used for contract identification and logging purposes. The name should be consistent across all versions of the same contract type. This enables external systems and other contracts to identify the contract's purpose and role within the protocol ecosystem.\",\"returns\":{\"_0\":\"The contract name as a string (e.g., \\\"kMinter\\\", \\\"kAssetRouter\\\", \\\"kRegistry\\\")\"}},\"contractVersion()\":{\"details\":\"Used for upgrade management and compatibility checking within the protocol. The version string should follow semantic versioning (e.g., \\\"1.0.0\\\") to clearly indicate major, minor, and patch updates. This enables the protocol governance and monitoring systems to track deployed versions and ensure compatibility between interacting components.\",\"returns\":{\"_0\":\"The contract version as a string following semantic versioning (e.g., \\\"1.0.0\\\")\"}},\"convertToAssets(uint256)\":{\"params\":{\"assets\":\"The amount of assets to convert\"},\"returns\":{\"_0\":\"The equivalent amount of shares\"}},\"convertToAssetsWithTotals(uint256,uint256)\":{\"params\":{\"shares\":\"The amount of shares to convert\",\"totalAssets\":\"The total assets available for conversion\"},\"returns\":{\"_0\":\"The equivalent amount of assets\"}},\"convertToShares(uint256)\":{\"params\":{\"shares\":\"The amount of shares to convert\"},\"returns\":{\"_0\":\"The equivalent amount of assets\"}},\"convertToSharesWithTotals(uint256,uint256)\":{\"params\":{\"assets\":\"The amount of assets to convert\",\"totalAssets\":\"The total assets available for conversion\"},\"returns\":{\"_0\":\"The equivalent amount of shares\"}},\"createNewBatch()\":{\"details\":\"This function initializes a fresh batch period for collecting staking and unstaking requests. Process: (1) Increments internal batch counter for unique identification, (2) Generates deterministic batch ID using chain-specific parameters (vault address, batch number, chainid, timestamp, asset) for collision resistance, (3) Initializes batch storage with open state enabling new request acceptance, (4) Updates vault's current batch tracking for request routing. Only relayers can call this function as part of the automated settlement schedule. The timing is typically coordinated with institutional settlement cycles to optimize capital efficiency across the protocol. Each batch remains open until explicitly closed by relayers or governance.\",\"returns\":{\"batchId\":\"Unique deterministic identifier for the newly created batch period\"}},\"getBatchId()\":{\"returns\":{\"_0\":\"Current batch ID for new requests\"}},\"getBatchIdInfo(bytes32)\":{\"params\":{\"batchId\":\"The batch identifier to query\"},\"returns\":{\"batchReceiver\":\"Address of batch receiver contract (may be zero if not deployed)\",\"isClosed\":\"Whether the batch is closed to new requests\",\"isSettled\":\"Whether the batch has been settled\",\"netSharePrice\":\"Net share price of settlement\",\"sharePrice\":\"Share price of settlement\"}},\"getBatchReceiver(bytes32)\":{\"params\":{\"batchId\":\"The batch identifier to query\"},\"returns\":{\"_0\":\"Address of the batch receiver (may be zero if not deployed)\"}},\"getCurrentBatchInfo()\":{\"returns\":{\"batchId\":\"Current batch identifier\",\"batchReceiver\":\"Address of batch receiver contract (may be zero if not created)\",\"isClosed\":\"Whether the batch is closed to new requests\",\"isSettled\":\"Whether the batch has been settled\"}},\"getSafeBatchId()\":{\"returns\":{\"_0\":\"Current batch ID (guaranteed to be valid and initialized)\"}},\"getSafeBatchReceiver(bytes32)\":{\"params\":{\"batchId\":\"The batch identifier to query\"},\"returns\":{\"_0\":\"Address of the batch receiver (guaranteed non-zero)\"}},\"getStakeRequest(bytes32)\":{\"params\":{\"requestId\":\"The unique identifier of the stake request\"},\"returns\":{\"stakeRequest\":\"The stake request struct containing all request details\"}},\"getTotalPendingStake()\":{\"returns\":{\"_0\":\"Total pending stake amount\"}},\"getUnstakeRequest(bytes32)\":{\"params\":{\"requestId\":\"The unique identifier of the unstake request\"},\"returns\":{\"unstakeRequest\":\"The unstake request struct containing all request details\"}},\"getUserRequests(address)\":{\"params\":{\"user\":\"The address to query requests for\"},\"returns\":{\"requestIds\":\"An array of all request IDs (both stake and unstake) for the user\"}},\"hurdleRate()\":{\"returns\":{\"_0\":\"Hurdle rate in basis points that vault performance must exceed\"}},\"isBatchClosed()\":{\"returns\":{\"_0\":\"True if current batch is closed and awaiting settlement\"}},\"isBatchSettled()\":{\"returns\":{\"_0\":\"True if current batch is settled and ready for claims\"}},\"isClosed(bytes32)\":{\"params\":{\"batchId_\":\"the batchId to verify\"},\"returns\":{\"isClosed_\":\"the state of the given batchId\"}},\"isHardHurdleRate()\":{\"returns\":{\"_0\":\"True if the current hurdle rate is a hard hurdle rate, false otherwise\"}},\"lastFeesChargedManagement()\":{\"returns\":{\"_0\":\"Timestamp of last management fee charge for accrual calculations\"}},\"lastFeesChargedPerformance()\":{\"returns\":{\"_0\":\"Timestamp of last performance fee charge for watermark tracking\"}},\"managementFee()\":{\"returns\":{\"_0\":\"Management fee rate in basis points (1% = 100)\"}},\"netSharePrice()\":{\"details\":\"Returns net share price after fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.\",\"returns\":{\"_0\":\"Share price per stkToken in underlying asset terms (scaled to token decimals)\"}},\"nextManagementFeeTimestamp()\":{\"returns\":{\"_0\":\"Projected timestamp for next management fee evaluation\"}},\"nextPerformanceFeeTimestamp()\":{\"returns\":{\"_0\":\"Projected timestamp for next performance fee evaluation\"}},\"notifyManagementFeesCharged(uint64)\":{\"details\":\"This function maintains accurate management fee accrual by recording when fees were last processed. Backend Coordination: (1) Off-chain systems calculate and process management fees based on time elapsed and assets under management, (2) Fees are deducted from vault assets through settlement mechanisms, (3) This function updates the tracking timestamp to prevent double-charging in future calculations. The timestamp validation ensures logical progression and prevents manipulation. Management fees accrue continuously, and proper timestamp tracking is essential for accurate pro-rata fee calculations across all vault participants.\",\"params\":{\"_timestamp\":\"The timestamp when management fees were processed (must be >= last timestamp, <= current time)\"}},\"notifyPerformanceFeesCharged(uint64)\":{\"details\":\"This function maintains accurate performance fee tracking by recording when performance fees were last calculated and charged. Backend Processing: (1) Off-chain systems evaluate vault performance against watermarks and hurdle rates, (2) Performance fees are calculated on excess returns and deducted during settlement, (3) This notification updates tracking timestamp and potentially adjusts watermark levels. The timestamp ensures proper sequencing of performance evaluations and prevents fee calculation errors. Performance fees are event-driven based on new high watermarks, making accurate timestamp tracking crucial for fair fee assessment across all users.\",\"params\":{\"_timestamp\":\"The timestamp when performance fees were processed (must be >= last timestamp, <= current time)\"}},\"performanceFee()\":{\"returns\":{\"_0\":\"Performance fee rate in basis points (1% = 100)\"}},\"registry()\":{\"returns\":{\"_0\":\"Address of the kRegistry contract managing protocol-wide settings\"}},\"requestStake(address,uint256)\":{\"details\":\"This function begins the retail staking process by: (1) Validating user has sufficient kToken balance and vault is not paused, (2) Creating a pending stake request with user-specified recipient and current batch ID for fair settlement, (3) Transferring kTokens from user to vault while updating pending stake tracking for accurate share calculations, (4) Coordinating with kAssetRouter to virtually move underlying assets from DN vault to staking vault, enabling proper asset allocation across the protocol. The request enters pending state until batch settlement, when the final share price is calculated based on vault performance. Users must later call claimStakedShares() after settlement to receive their stkTokens at the settled price. This two-phase approach ensures fair pricing for all users within a batch period.\",\"params\":{\"kTokensAmount\":\"The quantity of kTokens to stake (must not exceed user balance, cannot be zero)\",\"to\":\"The recipient address that will receive the stkTokens after successful settlement and claiming\"},\"returns\":{\"requestId\":\"Unique identifier for tracking this staking request through settlement and claiming\"}},\"requestUnstake(address,uint256)\":{\"details\":\"This function begins the retail unstaking process by: (1) Validating user has sufficient stkToken balance and vault is operational, (2) Creating pending unstake request with current batch ID for settlement coordination, (3) Transferring stkTokens from user to vault contract to maintain stable share price during settlement period, (4) Notifying kAssetRouter of share redemption request for proper accounting across vault network. The stkTokens remain locked in the vault until settlement when they are burned and equivalent kTokens (including yield) are made available. Users must later call claimUnstakedAssets() after settlement to receive their kTokens from the batch receiver contract. This two-phase design ensures accurate yield calculations and prevents share price manipulation during the settlement process.\",\"params\":{\"stkTokenAmount\":\"The quantity of stkTokens to unstake (must not exceed user balance, cannot be zero)\",\"to\":\"The recipient address that will receive the kTokens after successful settlement and claiming\"},\"returns\":{\"requestId\":\"Unique identifier for tracking this unstaking request through settlement and claiming\"}},\"setHardHurdleRate(bool)\":{\"details\":\"This function switches between soft and hard hurdle rate modes affecting performance fee calculations. Hurdle Rate Modes: (1) Soft Hurdle (_isHard = false): Performance fees are charged on all profits when returns exceed the hurdle rate threshold, providing simpler fee calculation while maintaining performance incentives, (2) Hard Hurdle (_isHard = true): Performance fees are only charged on the excess return above the hurdle rate, ensuring users keep the full hurdle rate return before any performance fees. The hurdle rate itself is set globally in the registry per asset, providing consistent benchmarks across vaults. This mechanism ensures vault operators are only rewarded for generating returns above market expectations, protecting user interests while incentivizing superior performance.\",\"params\":{\"_isHard\":\"True for hard hurdle (fees only on excess), false for soft hurdle (fees on all profits)\"}},\"setManagementFee(uint16)\":{\"details\":\"This function configures the periodic fee charged regardless of vault performance, compensating operators for ongoing vault management, risk monitoring, and operational costs. Management fees are calculated based on time elapsed since last fee charge and total assets under management. Process: (1) Validates fee rate does not exceed maximum allowed to protect users from excessive fees, (2) Updates stored management fee rate for future calculations, (3) Emits event for transparency and off-chain tracking. The fee accrues continuously and is realized during batch settlements, ensuring users see accurate net returns. Management fees are deducted from vault assets before performance fee calculations, following traditional fund management practices.\",\"params\":{\"_managementFee\":\"Annual management fee rate in basis points (1% = 100 bp, max 10000 bp)\"}},\"setMaxTotalAssets(uint256)\":{\"params\":{\"maxTotalAssets_\":\"Maximum total assets\"}},\"setPaused(bool)\":{\"details\":\"This function provides critical safety controls for vault operations by: (1) Enabling emergency admins to pause all user-facing operations during security incidents, market anomalies, or critical upgrades, (2) Preventing new stake/unstake requests and claims while preserving existing vault state and user balances, (3) Maintaining read-only access to vault data and view functions during pause periods for transparency, (4) Allowing authorized emergency admins to resume operations once issues are resolved or maintenance completed. When paused, all state-changing functions (requestStake, requestUnstake, cancelStakeRequest, cancelUnstakeRequest, claimStakedShares, claimUnstakedAssets) will revert with KSTAKINGVAULT_IS_PAUSED error. The pause mechanism serves as a circuit breaker protecting user funds during unexpected events while maintaining protocol integrity. Only emergency admins have permission to toggle this state, ensuring rapid response capabilities during critical situations without compromising decentralization principles.\",\"params\":{\"paused_\":\"The desired operational state (true = pause operations, false = resume operations)\"}},\"setPerformanceFee(uint16)\":{\"details\":\"This function configures the success fee charged when vault performance exceeds benchmark hurdle rates, aligning operator incentives with user returns. Performance fees are calculated during settlement based on share price appreciation above the watermark (highest previous share price) and hurdle rate requirements. Process: (1) Validates fee rate is within acceptable bounds for user protection, (2) Updates performance fee rate for future calculations, (3) Emits tracking event for transparency. The fee applies only to new high watermarks, preventing double-charging on recovered losses. Combined with hurdle rates, this ensures operators are rewarded for generating superior risk-adjusted returns while protecting users from excessive fee extraction.\",\"params\":{\"_performanceFee\":\"Performance fee rate in basis points charged on excess returns (max 10000 bp)\"}},\"settleBatch(bytes32)\":{\"details\":\"This function finalizes batch settlement by recording final asset values and enabling claims. Process: (1) Validates batch is closed and not already settled to prevent duplicate processing, (2) Snapshots both gross and net share prices at settlement time for accurate reward calculations, (3) Marks batch as settled enabling users to claim their staked shares or unstaked assets, (4) Completes the batch lifecycle allowing reward distribution through the claiming mechanism. Only kAssetRouter can settle batches as it coordinates yield calculations across DN vaults and manages cross-vault asset flows. Settlement triggers share price finalization based on vault performance during the batch period.\",\"params\":{\"_batchId\":\"The batch identifier to mark as settled (must be closed, not previously settled)\"}},\"sharePrice()\":{\"details\":\"Returns gross share price before fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.\",\"returns\":{\"_0\":\"Share price per stkToken in underlying asset terms (scaled to token decimals)\"}},\"sharePriceWatermark()\":{\"details\":\"The watermark tracks the highest share price achieved, ensuring performance fees are only charged on new highs and preventing double-charging on recovered losses. Reset occurs when new high watermarks are achieved, establishing a new baseline for future performance fee calculations.\",\"returns\":{\"_0\":\"Current high watermark share price in underlying asset terms\"}},\"totalAssets()\":{\"returns\":{\"_0\":\"Total asset value managed by the vault in underlying asset terms\"}},\"totalNetAssets()\":{\"details\":\"Provides user-facing asset value after management and performance fee deductions. Used for accurate user balance calculations and net yield reporting.\",\"returns\":{\"_0\":\"Net asset value available to users after fee deductions\"}},\"underlyingAsset()\":{\"returns\":{\"_0\":\"Address of the base asset (USDC, WBTC, etc.) managed by this vault\"}}},\"title\":\"IkStakingVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the remaining allowance that spender has to spend on behalf of owner\"},\"approve(address,uint256)\":{\"notice\":\"Sets amount as the allowance of spender over the caller's tokens\"},\"asset()\":{\"notice\":\"Returns the vault's share token (stkToken) address for ERC20 operations\"},\"balanceOf(address)\":{\"notice\":\"Returns the balance of the specified account\"},\"burnFees(uint256)\":{\"notice\":\"Burns shares from the vault for fees adjusting\"},\"cancelStakeRequest(bytes32)\":{\"notice\":\"Cancels a pending stake request and returns kTokens to the user before batch settlement\"},\"cancelUnstakeRequest(bytes32)\":{\"notice\":\"Cancels a pending unstake request and returns stkTokens to the user before batch settlement\"},\"claimStakedShares(bytes32)\":{\"notice\":\"Claims stkTokens from a settled staking batch at the finalized share price\"},\"claimUnstakedAssets(bytes32)\":{\"notice\":\"Claims kTokens plus accrued yield from a settled unstaking batch through batch receiver distribution\"},\"closeBatch(bytes32,bool)\":{\"notice\":\"Closes a batch to prevent new requests and prepare for settlement processing\"},\"computeLastBatchFees()\":{\"notice\":\"Calculates accumulated fees for the current period including management and performance components\"},\"contractName()\":{\"notice\":\"Returns the human-readable name identifier for this contract type\"},\"contractVersion()\":{\"notice\":\"Returns the version identifier for this contract implementation\"},\"convertToAssets(uint256)\":{\"notice\":\"Converts a given amount of assets to shares\"},\"convertToAssetsWithTotals(uint256,uint256)\":{\"notice\":\"Converts a given amount of shares to assets with a specified total assets\"},\"convertToShares(uint256)\":{\"notice\":\"Converts a given amount of shares to assets\"},\"convertToSharesWithTotals(uint256,uint256)\":{\"notice\":\"Converts a given amount of assets to shares with a specified total assets\"},\"createNewBatch()\":{\"notice\":\"Creates a new batch to begin aggregating user requests for the next settlement period\"},\"decimals()\":{\"notice\":\"Returns the decimals of the token\"},\"getBatchId()\":{\"notice\":\"Returns the current active batch identifier\"},\"getBatchIdInfo(bytes32)\":{\"notice\":\"Returns comprehensive information about a specific batch\"},\"getBatchReceiver(bytes32)\":{\"notice\":\"Returns the batch receiver address for a specific batch ID\"},\"getCurrentBatchInfo()\":{\"notice\":\"Returns comprehensive information about the current batch\"},\"getSafeBatchId()\":{\"notice\":\"Returns current batch ID with safety validation\"},\"getSafeBatchReceiver(bytes32)\":{\"notice\":\"Returns batch receiver address with validation, creating if necessary\"},\"getStakeRequest(bytes32)\":{\"notice\":\"Gets the details of a specific stake request\"},\"getTotalPendingStake()\":{\"notice\":\"Returns the total pending stake amount\"},\"getUnstakeRequest(bytes32)\":{\"notice\":\"Gets the details of a specific unstake request\"},\"getUserRequests(address)\":{\"notice\":\"Gets all request IDs associated with a user\"},\"hurdleRate()\":{\"notice\":\"Returns the hurdle rate threshold for performance fee calculations\"},\"isBatchClosed()\":{\"notice\":\"Checks if the current batch is closed to new requests\"},\"isBatchSettled()\":{\"notice\":\"Checks if the current batch has been settled with finalized prices\"},\"isClosed(bytes32)\":{\"notice\":\"Returns the close state of a given batchId\"},\"isHardHurdleRate()\":{\"notice\":\"Returns whether the current hurdle rate is a hard hurdle rate\"},\"lastFeesChargedManagement()\":{\"notice\":\"Returns the timestamp when management fees were last processed\"},\"lastFeesChargedPerformance()\":{\"notice\":\"Returns the timestamp when performance fees were last processed\"},\"managementFee()\":{\"notice\":\"Returns the current management fee rate charged on assets under management\"},\"name()\":{\"notice\":\"Returns the name of the token\"},\"netSharePrice()\":{\"notice\":\"Calculates current share price including all accrued yields\"},\"nextManagementFeeTimestamp()\":{\"notice\":\"Calculates the next timestamp when management fees can be charged\"},\"nextPerformanceFeeTimestamp()\":{\"notice\":\"Calculates the next timestamp when performance fees can be charged\"},\"notifyManagementFeesCharged(uint64)\":{\"notice\":\"Updates the timestamp tracking for management fee calculations after backend fee processing\"},\"notifyPerformanceFeesCharged(uint64)\":{\"notice\":\"Updates the timestamp tracking for performance fee calculations after backend fee processing\"},\"owner()\":{\"notice\":\"Returns the owner of the contract\"},\"performanceFee()\":{\"notice\":\"Returns the current performance fee rate charged on excess returns\"},\"registry()\":{\"notice\":\"Returns the protocol registry address for configuration and role management\"},\"requestStake(address,uint256)\":{\"notice\":\"Initiates kToken staking request for yield-generating stkToken shares in a batch processing system\"},\"requestUnstake(address,uint256)\":{\"notice\":\"Initiates stkToken unstaking request for kToken redemption plus accrued yield through batch processing\"},\"setHardHurdleRate(bool)\":{\"notice\":\"Configures the hurdle rate fee calculation mechanism for performance fee determination\"},\"setManagementFee(uint16)\":{\"notice\":\"Sets the annual management fee rate charged on assets under management\"},\"setMaxTotalAssets(uint256)\":{\"notice\":\"Sets the maximum total assets\"},\"setPaused(bool)\":{\"notice\":\"Controls the vault's operational state for emergency situations and maintenance periods\"},\"setPerformanceFee(uint16)\":{\"notice\":\"Sets the performance fee rate charged on vault returns above hurdle rates\"},\"settleBatch(bytes32)\":{\"notice\":\"Marks a batch as settled after yield distribution and enables user claiming\"},\"sharePrice()\":{\"notice\":\"Calculates current share price including all accrued yields\"},\"sharePriceWatermark()\":{\"notice\":\"Returns the high watermark used for performance fee calculations\"},\"symbol()\":{\"notice\":\"Returns the symbol of the token\"},\"totalAssets()\":{\"notice\":\"Returns total assets under management including pending fees\"},\"totalNetAssets()\":{\"notice\":\"Returns net assets after deducting accumulated fees\"},\"totalSupply()\":{\"notice\":\"Returns the total supply of the token\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers tokens to the specified recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens from sender to recipient using the allowance mechanism\"},\"underlyingAsset()\":{\"notice\":\"Returns the underlying asset address that this vault generates yield on\"}},\"notice\":\"Comprehensive interface combining retail staking operations with ERC20 share tokens and vault state reading\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IkStakingVault.sol\":\"IkStakingVault\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":kam/src/=src/\",\":kam/test/=test/\",\":openzeppelin/=src/vendor/openzeppelin/\",\":solady/=src/vendor/solady/\",\":uniswap/=src/vendor/uniswap/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IVault.sol\":{\"keccak256\":\"0x92198758abccb112805b592f2f4024731d92b6a02c93fc7f9e28bc9ee6ee3290\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82c99cb665ce971c4f83050867a6ed0f79117adbb999cef70a9f6b5c099b604e\",\"dweb:/ipfs/QmRsMEPE5UZKQgrjsWcGjFQFipgxXdmnmP9raRqHbBiWWX\"]},\"src/interfaces/IVaultBatch.sol\":{\"keccak256\":\"0x0a44fd2302ad59ec16ad67be0afcb63aaf96d105469512acd7161304cc1c85f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f330dd9284c50c75dea5b132a549fac4f3baf107cdaa4a21374af8435cbf45c9\",\"dweb:/ipfs/QmRBbusrsoEM7VYjtEKXphnzE6RFkFoLhU2iNRwTDZuXTp\"]},\"src/interfaces/IVaultClaim.sol\":{\"keccak256\":\"0xbc8653ba55535db7f9f97636eefbaac39aee5940358b8dbf374c6dd49029cf90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fe53e06a6eeb51f74856ef36061939830f4bd36cac7cea57797d251aa8958b0\",\"dweb:/ipfs/Qmbsd3B9CFBdGhdtMnycY85CKFx9mfqQN2ML6quGZiP8Zk\"]},\"src/interfaces/IVaultFees.sol\":{\"keccak256\":\"0xbfebf7c01dbd77a63faa22c8e021bc4e94145183819cf473f4612bc54e4f4b62\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3324d221494afeb37042dcb27b769a8ce0efc9c444768f6cef3e32cfdc3c77ad\",\"dweb:/ipfs/QmcYkbpi88q9oWBB7cmhfyXb6BonVskBVuTveGFaYZ6Nj8\"]},\"src/interfaces/IVersioned.sol\":{\"keccak256\":\"0x23e7a218ecbf42e18656d069ee25302c74c5027d1dcfa4e1b9c54501d76a72f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e2643eaf8cc8f8bc04dd90c6cbf5c1429de314dc85e93c254b1deae782af6eb\",\"dweb:/ipfs/Qmb4s6G5PNFLy6iANEqHvanKZ3Tu1ahfW5V9ppWCxKTiDD\"]},\"src/interfaces/IkStakingVault.sol\":{\"keccak256\":\"0x49cc9d533e84e0c79ebc4b2c9a7c98ef237e80b7c8c5e9b2316086f4a39f08ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6fceb775fcad58c3e632d021bc619cc5ca820dd908e148adcf0016724991c58\",\"dweb:/ipfs/QmcSJPz3MpQfobNrXKg1FL8PMucUHtuWvcDCdbYwiUuH8i\"]},\"src/interfaces/modules/IVaultReader.sol\":{\"keccak256\":\"0xa687ce1a536cb890fea7462f4ac2ecc012d3531987539d00fc3240c19ffacca6\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b5099978a9e2b5ec2791cc2dc669055da7405918034b2feda4c49c0851f43e32\",\"dweb:/ipfs/QmYkzk43kRSZzxDf2phdAWFguyb32MKFyfaGMhAbEQhDiz\"]},\"src/kStakingVault/types/BaseVaultTypes.sol\":{\"keccak256\":\"0xa6dfda9ab80c6bca9613c989fb5863c81062f8378dc22c0433ca3464ba26d4b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41dd89e20036e001eb0388e89c94e1e6c71df8f9b6155a236e0886f788e7f3ca\",\"dweb:/ipfs/QmRkAwRBoB9yHLAdvNAy5geVu5tXDWzFKfmf5eDDECrf4T\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"burnFees"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"cancelStakeRequest"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"cancelUnstakeRequest"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"claimStakedShares"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"claimUnstakedAssets"},{"inputs":[{"internalType":"bytes32","name":"_batchId","type":"bytes32"},{"internalType":"bool","name":"_create","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"closeBatch"},{"inputs":[],"stateMutability":"view","type":"function","name":"computeLastBatchFees","outputs":[{"internalType":"uint256","name":"managementFees","type":"uint256"},{"internalType":"uint256","name":"performanceFees","type":"uint256"},{"internalType":"uint256","name":"totalFees","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"contractName","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"contractVersion","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"uint256","name":"totalAssets","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToAssetsWithTotals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"uint256","name":"totalAssets","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToSharesWithTotals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"createNewBatch","outputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBatchId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBatchIdInfo","outputs":[{"internalType":"address","name":"batchReceiver","type":"address"},{"internalType":"bool","name":"isClosed","type":"bool"},{"internalType":"bool","name":"isSettled","type":"bool"},{"internalType":"uint256","name":"sharePrice","type":"uint256"},{"internalType":"uint256","name":"netSharePrice","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBatchReceiver","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBatchInfo","outputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"},{"internalType":"address","name":"batchReceiver","type":"address"},{"internalType":"bool","name":"isClosed","type":"bool"},{"internalType":"bool","name":"isSettled","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getSafeBatchId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getSafeBatchReceiver","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getStakeRequest","outputs":[{"internalType":"struct BaseVaultTypes.StakeRequest","name":"stakeRequest","type":"tuple","components":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint128","name":"kTokenAmount","type":"uint128"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"batchId","type":"bytes32"},{"internalType":"uint64","name":"requestTimestamp","type":"uint64"},{"internalType":"enum BaseVaultTypes.RequestStatus","name":"status","type":"uint8"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getTotalPendingStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getUnstakeRequest","outputs":[{"internalType":"struct BaseVaultTypes.UnstakeRequest","name":"unstakeRequest","type":"tuple","components":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint128","name":"stkTokenAmount","type":"uint128"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"batchId","type":"bytes32"},{"internalType":"uint64","name":"requestTimestamp","type":"uint64"},{"internalType":"enum BaseVaultTypes.RequestStatus","name":"status","type":"uint8"}]}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getUserRequests","outputs":[{"internalType":"bytes32[]","name":"requestIds","type":"bytes32[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"hurdleRate","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isBatchClosed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isBatchSettled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"batchId_","type":"bytes32"}],"stateMutability":"view","type":"function","name":"isClosed","outputs":[{"internalType":"bool","name":"isClosed_","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isHardHurdleRate","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastFeesChargedManagement","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastFeesChargedPerformance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"managementFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"netSharePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"nextManagementFeeTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"nextPerformanceFeeTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint64","name":"_timestamp","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"notifyManagementFeesCharged"},{"inputs":[{"internalType":"uint64","name":"_timestamp","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"notifyPerformanceFeesCharged"},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"performanceFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"registry","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"kTokensAmount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"requestStake","outputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"stkTokenAmount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"requestUnstake","outputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}]},{"inputs":[{"internalType":"bool","name":"_isHard","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setHardHurdleRate"},{"inputs":[{"internalType":"uint16","name":"_managementFee","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"setManagementFee"},{"inputs":[{"internalType":"uint256","name":"maxTotalAssets_","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setMaxTotalAssets"},{"inputs":[{"internalType":"bool","name":"paused_","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setPaused"},{"inputs":[{"internalType":"uint16","name":"_performanceFee","type":"uint16"}],"stateMutability":"nonpayable","type":"function","name":"setPerformanceFee"},{"inputs":[{"internalType":"bytes32","name":"_batchId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"settleBatch"},{"inputs":[],"stateMutability":"view","type":"function","name":"sharePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"sharePriceWatermark","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalNetAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"underlyingAsset","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"asset()":{"returns":{"_0":"Address of this vault's stkToken contract representing user shares"}},"burnFees(uint256)":{"details":"This function is only callable by the admin","params":{"shares":"The amount of shares to burn"}},"cancelStakeRequest(bytes32)":{"details":"This function allows users to reverse their staking request before batch processing by: (1) Validating the request exists, belongs to the caller, and remains in pending status, (2) Checking the associated batch hasn't been closed or settled to prevent manipulation of finalized operations, (3) Updating request status to cancelled and removing from user's active requests tracking, (4) Reducing total pending stake amount to maintain accurate vault accounting, (5) Notifying kAssetRouter to reverse the virtual asset movement from staking vault back to DN vault, ensuring proper asset allocation, (6) Returning the originally deposited kTokens to the user's address. This cancellation mechanism provides flexibility for users who change their mind or need immediate liquidity before the batch settlement occurs. The operation is only valid during the open batch period before closure by relayers.","params":{"requestId":"The unique identifier of the stake request to cancel (must be owned by caller)"}},"cancelUnstakeRequest(bytes32)":{"details":"This function allows users to reverse their unstaking request before batch processing by: (1) Validating the request exists, belongs to the caller, and remains in pending status, (2) Checking the associated batch hasn't been closed or settled to prevent reversal of finalized operations, (3) Updating request status to cancelled and removing from user's active requests tracking, (4) Notifying kAssetRouter to reverse the share redemption request, maintaining proper share accounting across the protocol, (5) Returning the originally transferred stkTokens from the vault back to the user's address. This cancellation mechanism enables users to maintain their staked position if market conditions change or they reconsider their unstaking decision. The stkTokens are returned without any yield impact since the batch hasn't settled. The operation is only valid during the open batch period before closure by relayers.","params":{"requestId":"The unique identifier of the unstake request to cancel (must be owned by caller)"}},"claimStakedShares(bytes32)":{"details":"This function completes the staking process by distributing stkTokens to users after batch settlement. Process: (1) Validates batch has been settled and share prices are finalized to ensure accurate distribution, (2) Verifies request ownership and pending status to prevent unauthorized or duplicate claims, (3) Calculates stkToken amount based on original kToken deposit and settled net share price (after fees), (4) Mints stkTokens to specified recipient reflecting their proportional vault ownership, (5) Marks request as claimed to prevent future reprocessing. The net share price accounts for management and performance fees, ensuring users receive their accurate yield-adjusted position. stkTokens are ERC20-compatible shares that continue accruing yield through share price appreciation until unstaking.","params":{"requestId":"The specific staking request identifier to claim rewards for"}},"claimUnstakedAssets(bytes32)":{"details":"This function completes the unstaking process by distributing redeemed assets to users after settlement. Process: (1) Validates batch settlement and asset distribution readiness through batch receiver verification, (2) Confirms request ownership and pending status to ensure authorized claiming, (3) Calculates kToken amount based on original stkToken redemption and settled share price including yield, (4) Burns locked stkTokens that were held during settlement period, (5) Triggers batch receiver to transfer calculated kTokens to recipient, (6) Marks request as claimed completing the unstaking cycle. The batch receiver pattern ensures asset isolation between settlement periods while enabling efficient distribution. Users receive their original investment plus proportional share of vault yields earned during their staking period.","params":{"requestId":"The specific unstaking request identifier to claim assets for"}},"closeBatch(bytes32,bool)":{"details":"This function transitions a batch from open to closed state, finalizing the request set for settlement. Process: (1) Validates batch exists and is currently open to prevent double-closing, (2) Marks batch as closed preventing new stake/unstake requests from joining, (3) Optionally creates new batch for continued operations if _create flag is true, enabling seamless transitions. Once closed, the batch awaits settlement by kAssetRouter which will calculate final share prices and distribute yields. Only relayers can execute batch closure as part of the coordinated settlement schedule across all protocol vaults. The timing typically aligns with DN vault yield calculations to ensure accurate price discovery.","params":{"_batchId":"The specific batch identifier to close (must be currently open)","_create":"Whether to immediately create a new batch after closing for continued operations"}},"computeLastBatchFees()":{"details":"Computes real-time fee accruals based on time elapsed and vault performance since last fee charge. Management fees accrue continuously based on assets under management and time passed. Performance fees are calculated on share price appreciation above watermarks and hurdle rates. This function provides accurate fee projections for settlement planning and user transparency without modifying state.","returns":{"managementFees":"Accrued management fees in underlying asset terms","performanceFees":"Accrued performance fees in underlying asset terms","totalFees":"Combined management and performance fees for total fee burden"}},"contractName()":{"details":"Used for contract identification and logging purposes. The name should be consistent across all versions of the same contract type. This enables external systems and other contracts to identify the contract's purpose and role within the protocol ecosystem.","returns":{"_0":"The contract name as a string (e.g., \"kMinter\", \"kAssetRouter\", \"kRegistry\")"}},"contractVersion()":{"details":"Used for upgrade management and compatibility checking within the protocol. The version string should follow semantic versioning (e.g., \"1.0.0\") to clearly indicate major, minor, and patch updates. This enables the protocol governance and monitoring systems to track deployed versions and ensure compatibility between interacting components.","returns":{"_0":"The contract version as a string following semantic versioning (e.g., \"1.0.0\")"}},"convertToAssets(uint256)":{"params":{"assets":"The amount of assets to convert"},"returns":{"_0":"The equivalent amount of shares"}},"convertToAssetsWithTotals(uint256,uint256)":{"params":{"shares":"The amount of shares to convert","totalAssets":"The total assets available for conversion"},"returns":{"_0":"The equivalent amount of assets"}},"convertToShares(uint256)":{"params":{"shares":"The amount of shares to convert"},"returns":{"_0":"The equivalent amount of assets"}},"convertToSharesWithTotals(uint256,uint256)":{"params":{"assets":"The amount of assets to convert","totalAssets":"The total assets available for conversion"},"returns":{"_0":"The equivalent amount of shares"}},"createNewBatch()":{"details":"This function initializes a fresh batch period for collecting staking and unstaking requests. Process: (1) Increments internal batch counter for unique identification, (2) Generates deterministic batch ID using chain-specific parameters (vault address, batch number, chainid, timestamp, asset) for collision resistance, (3) Initializes batch storage with open state enabling new request acceptance, (4) Updates vault's current batch tracking for request routing. Only relayers can call this function as part of the automated settlement schedule. The timing is typically coordinated with institutional settlement cycles to optimize capital efficiency across the protocol. Each batch remains open until explicitly closed by relayers or governance.","returns":{"batchId":"Unique deterministic identifier for the newly created batch period"}},"getBatchId()":{"returns":{"_0":"Current batch ID for new requests"}},"getBatchIdInfo(bytes32)":{"params":{"batchId":"The batch identifier to query"},"returns":{"batchReceiver":"Address of batch receiver contract (may be zero if not deployed)","isClosed":"Whether the batch is closed to new requests","isSettled":"Whether the batch has been settled","netSharePrice":"Net share price of settlement","sharePrice":"Share price of settlement"}},"getBatchReceiver(bytes32)":{"params":{"batchId":"The batch identifier to query"},"returns":{"_0":"Address of the batch receiver (may be zero if not deployed)"}},"getCurrentBatchInfo()":{"returns":{"batchId":"Current batch identifier","batchReceiver":"Address of batch receiver contract (may be zero if not created)","isClosed":"Whether the batch is closed to new requests","isSettled":"Whether the batch has been settled"}},"getSafeBatchId()":{"returns":{"_0":"Current batch ID (guaranteed to be valid and initialized)"}},"getSafeBatchReceiver(bytes32)":{"params":{"batchId":"The batch identifier to query"},"returns":{"_0":"Address of the batch receiver (guaranteed non-zero)"}},"getStakeRequest(bytes32)":{"params":{"requestId":"The unique identifier of the stake request"},"returns":{"stakeRequest":"The stake request struct containing all request details"}},"getTotalPendingStake()":{"returns":{"_0":"Total pending stake amount"}},"getUnstakeRequest(bytes32)":{"params":{"requestId":"The unique identifier of the unstake request"},"returns":{"unstakeRequest":"The unstake request struct containing all request details"}},"getUserRequests(address)":{"params":{"user":"The address to query requests for"},"returns":{"requestIds":"An array of all request IDs (both stake and unstake) for the user"}},"hurdleRate()":{"returns":{"_0":"Hurdle rate in basis points that vault performance must exceed"}},"isBatchClosed()":{"returns":{"_0":"True if current batch is closed and awaiting settlement"}},"isBatchSettled()":{"returns":{"_0":"True if current batch is settled and ready for claims"}},"isClosed(bytes32)":{"params":{"batchId_":"the batchId to verify"},"returns":{"isClosed_":"the state of the given batchId"}},"isHardHurdleRate()":{"returns":{"_0":"True if the current hurdle rate is a hard hurdle rate, false otherwise"}},"lastFeesChargedManagement()":{"returns":{"_0":"Timestamp of last management fee charge for accrual calculations"}},"lastFeesChargedPerformance()":{"returns":{"_0":"Timestamp of last performance fee charge for watermark tracking"}},"managementFee()":{"returns":{"_0":"Management fee rate in basis points (1% = 100)"}},"netSharePrice()":{"details":"Returns net share price after fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.","returns":{"_0":"Share price per stkToken in underlying asset terms (scaled to token decimals)"}},"nextManagementFeeTimestamp()":{"returns":{"_0":"Projected timestamp for next management fee evaluation"}},"nextPerformanceFeeTimestamp()":{"returns":{"_0":"Projected timestamp for next performance fee evaluation"}},"notifyManagementFeesCharged(uint64)":{"details":"This function maintains accurate management fee accrual by recording when fees were last processed. Backend Coordination: (1) Off-chain systems calculate and process management fees based on time elapsed and assets under management, (2) Fees are deducted from vault assets through settlement mechanisms, (3) This function updates the tracking timestamp to prevent double-charging in future calculations. The timestamp validation ensures logical progression and prevents manipulation. Management fees accrue continuously, and proper timestamp tracking is essential for accurate pro-rata fee calculations across all vault participants.","params":{"_timestamp":"The timestamp when management fees were processed (must be >= last timestamp, <= current time)"}},"notifyPerformanceFeesCharged(uint64)":{"details":"This function maintains accurate performance fee tracking by recording when performance fees were last calculated and charged. Backend Processing: (1) Off-chain systems evaluate vault performance against watermarks and hurdle rates, (2) Performance fees are calculated on excess returns and deducted during settlement, (3) This notification updates tracking timestamp and potentially adjusts watermark levels. The timestamp ensures proper sequencing of performance evaluations and prevents fee calculation errors. Performance fees are event-driven based on new high watermarks, making accurate timestamp tracking crucial for fair fee assessment across all users.","params":{"_timestamp":"The timestamp when performance fees were processed (must be >= last timestamp, <= current time)"}},"performanceFee()":{"returns":{"_0":"Performance fee rate in basis points (1% = 100)"}},"registry()":{"returns":{"_0":"Address of the kRegistry contract managing protocol-wide settings"}},"requestStake(address,uint256)":{"details":"This function begins the retail staking process by: (1) Validating user has sufficient kToken balance and vault is not paused, (2) Creating a pending stake request with user-specified recipient and current batch ID for fair settlement, (3) Transferring kTokens from user to vault while updating pending stake tracking for accurate share calculations, (4) Coordinating with kAssetRouter to virtually move underlying assets from DN vault to staking vault, enabling proper asset allocation across the protocol. The request enters pending state until batch settlement, when the final share price is calculated based on vault performance. Users must later call claimStakedShares() after settlement to receive their stkTokens at the settled price. This two-phase approach ensures fair pricing for all users within a batch period.","params":{"kTokensAmount":"The quantity of kTokens to stake (must not exceed user balance, cannot be zero)","to":"The recipient address that will receive the stkTokens after successful settlement and claiming"},"returns":{"requestId":"Unique identifier for tracking this staking request through settlement and claiming"}},"requestUnstake(address,uint256)":{"details":"This function begins the retail unstaking process by: (1) Validating user has sufficient stkToken balance and vault is operational, (2) Creating pending unstake request with current batch ID for settlement coordination, (3) Transferring stkTokens from user to vault contract to maintain stable share price during settlement period, (4) Notifying kAssetRouter of share redemption request for proper accounting across vault network. The stkTokens remain locked in the vault until settlement when they are burned and equivalent kTokens (including yield) are made available. Users must later call claimUnstakedAssets() after settlement to receive their kTokens from the batch receiver contract. This two-phase design ensures accurate yield calculations and prevents share price manipulation during the settlement process.","params":{"stkTokenAmount":"The quantity of stkTokens to unstake (must not exceed user balance, cannot be zero)","to":"The recipient address that will receive the kTokens after successful settlement and claiming"},"returns":{"requestId":"Unique identifier for tracking this unstaking request through settlement and claiming"}},"setHardHurdleRate(bool)":{"details":"This function switches between soft and hard hurdle rate modes affecting performance fee calculations. Hurdle Rate Modes: (1) Soft Hurdle (_isHard = false): Performance fees are charged on all profits when returns exceed the hurdle rate threshold, providing simpler fee calculation while maintaining performance incentives, (2) Hard Hurdle (_isHard = true): Performance fees are only charged on the excess return above the hurdle rate, ensuring users keep the full hurdle rate return before any performance fees. The hurdle rate itself is set globally in the registry per asset, providing consistent benchmarks across vaults. This mechanism ensures vault operators are only rewarded for generating returns above market expectations, protecting user interests while incentivizing superior performance.","params":{"_isHard":"True for hard hurdle (fees only on excess), false for soft hurdle (fees on all profits)"}},"setManagementFee(uint16)":{"details":"This function configures the periodic fee charged regardless of vault performance, compensating operators for ongoing vault management, risk monitoring, and operational costs. Management fees are calculated based on time elapsed since last fee charge and total assets under management. Process: (1) Validates fee rate does not exceed maximum allowed to protect users from excessive fees, (2) Updates stored management fee rate for future calculations, (3) Emits event for transparency and off-chain tracking. The fee accrues continuously and is realized during batch settlements, ensuring users see accurate net returns. Management fees are deducted from vault assets before performance fee calculations, following traditional fund management practices.","params":{"_managementFee":"Annual management fee rate in basis points (1% = 100 bp, max 10000 bp)"}},"setMaxTotalAssets(uint256)":{"params":{"maxTotalAssets_":"Maximum total assets"}},"setPaused(bool)":{"details":"This function provides critical safety controls for vault operations by: (1) Enabling emergency admins to pause all user-facing operations during security incidents, market anomalies, or critical upgrades, (2) Preventing new stake/unstake requests and claims while preserving existing vault state and user balances, (3) Maintaining read-only access to vault data and view functions during pause periods for transparency, (4) Allowing authorized emergency admins to resume operations once issues are resolved or maintenance completed. When paused, all state-changing functions (requestStake, requestUnstake, cancelStakeRequest, cancelUnstakeRequest, claimStakedShares, claimUnstakedAssets) will revert with KSTAKINGVAULT_IS_PAUSED error. The pause mechanism serves as a circuit breaker protecting user funds during unexpected events while maintaining protocol integrity. Only emergency admins have permission to toggle this state, ensuring rapid response capabilities during critical situations without compromising decentralization principles.","params":{"paused_":"The desired operational state (true = pause operations, false = resume operations)"}},"setPerformanceFee(uint16)":{"details":"This function configures the success fee charged when vault performance exceeds benchmark hurdle rates, aligning operator incentives with user returns. Performance fees are calculated during settlement based on share price appreciation above the watermark (highest previous share price) and hurdle rate requirements. Process: (1) Validates fee rate is within acceptable bounds for user protection, (2) Updates performance fee rate for future calculations, (3) Emits tracking event for transparency. The fee applies only to new high watermarks, preventing double-charging on recovered losses. Combined with hurdle rates, this ensures operators are rewarded for generating superior risk-adjusted returns while protecting users from excessive fee extraction.","params":{"_performanceFee":"Performance fee rate in basis points charged on excess returns (max 10000 bp)"}},"settleBatch(bytes32)":{"details":"This function finalizes batch settlement by recording final asset values and enabling claims. Process: (1) Validates batch is closed and not already settled to prevent duplicate processing, (2) Snapshots both gross and net share prices at settlement time for accurate reward calculations, (3) Marks batch as settled enabling users to claim their staked shares or unstaked assets, (4) Completes the batch lifecycle allowing reward distribution through the claiming mechanism. Only kAssetRouter can settle batches as it coordinates yield calculations across DN vaults and manages cross-vault asset flows. Settlement triggers share price finalization based on vault performance during the batch period.","params":{"_batchId":"The batch identifier to mark as settled (must be closed, not previously settled)"}},"sharePrice()":{"details":"Returns gross share price before fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.","returns":{"_0":"Share price per stkToken in underlying asset terms (scaled to token decimals)"}},"sharePriceWatermark()":{"details":"The watermark tracks the highest share price achieved, ensuring performance fees are only charged on new highs and preventing double-charging on recovered losses. Reset occurs when new high watermarks are achieved, establishing a new baseline for future performance fee calculations.","returns":{"_0":"Current high watermark share price in underlying asset terms"}},"totalAssets()":{"returns":{"_0":"Total asset value managed by the vault in underlying asset terms"}},"totalNetAssets()":{"details":"Provides user-facing asset value after management and performance fee deductions. Used for accurate user balance calculations and net yield reporting.","returns":{"_0":"Net asset value available to users after fee deductions"}},"underlyingAsset()":{"returns":{"_0":"Address of the base asset (USDC, WBTC, etc.) managed by this vault"}}},"version":1},"userdoc":{"kind":"user","methods":{"allowance(address,address)":{"notice":"Returns the remaining allowance that spender has to spend on behalf of owner"},"approve(address,uint256)":{"notice":"Sets amount as the allowance of spender over the caller's tokens"},"asset()":{"notice":"Returns the vault's share token (stkToken) address for ERC20 operations"},"balanceOf(address)":{"notice":"Returns the balance of the specified account"},"burnFees(uint256)":{"notice":"Burns shares from the vault for fees adjusting"},"cancelStakeRequest(bytes32)":{"notice":"Cancels a pending stake request and returns kTokens to the user before batch settlement"},"cancelUnstakeRequest(bytes32)":{"notice":"Cancels a pending unstake request and returns stkTokens to the user before batch settlement"},"claimStakedShares(bytes32)":{"notice":"Claims stkTokens from a settled staking batch at the finalized share price"},"claimUnstakedAssets(bytes32)":{"notice":"Claims kTokens plus accrued yield from a settled unstaking batch through batch receiver distribution"},"closeBatch(bytes32,bool)":{"notice":"Closes a batch to prevent new requests and prepare for settlement processing"},"computeLastBatchFees()":{"notice":"Calculates accumulated fees for the current period including management and performance components"},"contractName()":{"notice":"Returns the human-readable name identifier for this contract type"},"contractVersion()":{"notice":"Returns the version identifier for this contract implementation"},"convertToAssets(uint256)":{"notice":"Converts a given amount of assets to shares"},"convertToAssetsWithTotals(uint256,uint256)":{"notice":"Converts a given amount of shares to assets with a specified total assets"},"convertToShares(uint256)":{"notice":"Converts a given amount of shares to assets"},"convertToSharesWithTotals(uint256,uint256)":{"notice":"Converts a given amount of assets to shares with a specified total assets"},"createNewBatch()":{"notice":"Creates a new batch to begin aggregating user requests for the next settlement period"},"decimals()":{"notice":"Returns the decimals of the token"},"getBatchId()":{"notice":"Returns the current active batch identifier"},"getBatchIdInfo(bytes32)":{"notice":"Returns comprehensive information about a specific batch"},"getBatchReceiver(bytes32)":{"notice":"Returns the batch receiver address for a specific batch ID"},"getCurrentBatchInfo()":{"notice":"Returns comprehensive information about the current batch"},"getSafeBatchId()":{"notice":"Returns current batch ID with safety validation"},"getSafeBatchReceiver(bytes32)":{"notice":"Returns batch receiver address with validation, creating if necessary"},"getStakeRequest(bytes32)":{"notice":"Gets the details of a specific stake request"},"getTotalPendingStake()":{"notice":"Returns the total pending stake amount"},"getUnstakeRequest(bytes32)":{"notice":"Gets the details of a specific unstake request"},"getUserRequests(address)":{"notice":"Gets all request IDs associated with a user"},"hurdleRate()":{"notice":"Returns the hurdle rate threshold for performance fee calculations"},"isBatchClosed()":{"notice":"Checks if the current batch is closed to new requests"},"isBatchSettled()":{"notice":"Checks if the current batch has been settled with finalized prices"},"isClosed(bytes32)":{"notice":"Returns the close state of a given batchId"},"isHardHurdleRate()":{"notice":"Returns whether the current hurdle rate is a hard hurdle rate"},"lastFeesChargedManagement()":{"notice":"Returns the timestamp when management fees were last processed"},"lastFeesChargedPerformance()":{"notice":"Returns the timestamp when performance fees were last processed"},"managementFee()":{"notice":"Returns the current management fee rate charged on assets under management"},"name()":{"notice":"Returns the name of the token"},"netSharePrice()":{"notice":"Calculates current share price including all accrued yields"},"nextManagementFeeTimestamp()":{"notice":"Calculates the next timestamp when management fees can be charged"},"nextPerformanceFeeTimestamp()":{"notice":"Calculates the next timestamp when performance fees can be charged"},"notifyManagementFeesCharged(uint64)":{"notice":"Updates the timestamp tracking for management fee calculations after backend fee processing"},"notifyPerformanceFeesCharged(uint64)":{"notice":"Updates the timestamp tracking for performance fee calculations after backend fee processing"},"owner()":{"notice":"Returns the owner of the contract"},"performanceFee()":{"notice":"Returns the current performance fee rate charged on excess returns"},"registry()":{"notice":"Returns the protocol registry address for configuration and role management"},"requestStake(address,uint256)":{"notice":"Initiates kToken staking request for yield-generating stkToken shares in a batch processing system"},"requestUnstake(address,uint256)":{"notice":"Initiates stkToken unstaking request for kToken redemption plus accrued yield through batch processing"},"setHardHurdleRate(bool)":{"notice":"Configures the hurdle rate fee calculation mechanism for performance fee determination"},"setManagementFee(uint16)":{"notice":"Sets the annual management fee rate charged on assets under management"},"setMaxTotalAssets(uint256)":{"notice":"Sets the maximum total assets"},"setPaused(bool)":{"notice":"Controls the vault's operational state for emergency situations and maintenance periods"},"setPerformanceFee(uint16)":{"notice":"Sets the performance fee rate charged on vault returns above hurdle rates"},"settleBatch(bytes32)":{"notice":"Marks a batch as settled after yield distribution and enables user claiming"},"sharePrice()":{"notice":"Calculates current share price including all accrued yields"},"sharePriceWatermark()":{"notice":"Returns the high watermark used for performance fee calculations"},"symbol()":{"notice":"Returns the symbol of the token"},"totalAssets()":{"notice":"Returns total assets under management including pending fees"},"totalNetAssets()":{"notice":"Returns net assets after deducting accumulated fees"},"totalSupply()":{"notice":"Returns the total supply of the token"},"transfer(address,uint256)":{"notice":"Transfers tokens to the specified recipient"},"transferFrom(address,address,uint256)":{"notice":"Transfers tokens from sender to recipient using the allowance mechanism"},"underlyingAsset()":{"notice":"Returns the underlying asset address that this vault generates yield on"}},"version":1}},"settings":{"remappings":["forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/","forge-std/=dependencies/forge-std-1.9.7/src/","kam/src/=src/","kam/test/=test/","openzeppelin/=src/vendor/openzeppelin/","solady/=src/vendor/solady/","uniswap/=src/vendor/uniswap/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IkStakingVault.sol":"IkStakingVault"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IVault.sol":{"keccak256":"0x92198758abccb112805b592f2f4024731d92b6a02c93fc7f9e28bc9ee6ee3290","urls":["bzz-raw://82c99cb665ce971c4f83050867a6ed0f79117adbb999cef70a9f6b5c099b604e","dweb:/ipfs/QmRsMEPE5UZKQgrjsWcGjFQFipgxXdmnmP9raRqHbBiWWX"],"license":"MIT"},"src/interfaces/IVaultBatch.sol":{"keccak256":"0x0a44fd2302ad59ec16ad67be0afcb63aaf96d105469512acd7161304cc1c85f2","urls":["bzz-raw://f330dd9284c50c75dea5b132a549fac4f3baf107cdaa4a21374af8435cbf45c9","dweb:/ipfs/QmRBbusrsoEM7VYjtEKXphnzE6RFkFoLhU2iNRwTDZuXTp"],"license":"MIT"},"src/interfaces/IVaultClaim.sol":{"keccak256":"0xbc8653ba55535db7f9f97636eefbaac39aee5940358b8dbf374c6dd49029cf90","urls":["bzz-raw://3fe53e06a6eeb51f74856ef36061939830f4bd36cac7cea57797d251aa8958b0","dweb:/ipfs/Qmbsd3B9CFBdGhdtMnycY85CKFx9mfqQN2ML6quGZiP8Zk"],"license":"MIT"},"src/interfaces/IVaultFees.sol":{"keccak256":"0xbfebf7c01dbd77a63faa22c8e021bc4e94145183819cf473f4612bc54e4f4b62","urls":["bzz-raw://3324d221494afeb37042dcb27b769a8ce0efc9c444768f6cef3e32cfdc3c77ad","dweb:/ipfs/QmcYkbpi88q9oWBB7cmhfyXb6BonVskBVuTveGFaYZ6Nj8"],"license":"MIT"},"src/interfaces/IVersioned.sol":{"keccak256":"0x23e7a218ecbf42e18656d069ee25302c74c5027d1dcfa4e1b9c54501d76a72f5","urls":["bzz-raw://2e2643eaf8cc8f8bc04dd90c6cbf5c1429de314dc85e93c254b1deae782af6eb","dweb:/ipfs/Qmb4s6G5PNFLy6iANEqHvanKZ3Tu1ahfW5V9ppWCxKTiDD"],"license":"MIT"},"src/interfaces/IkStakingVault.sol":{"keccak256":"0x49cc9d533e84e0c79ebc4b2c9a7c98ef237e80b7c8c5e9b2316086f4a39f08ac","urls":["bzz-raw://c6fceb775fcad58c3e632d021bc619cc5ca820dd908e148adcf0016724991c58","dweb:/ipfs/QmcSJPz3MpQfobNrXKg1FL8PMucUHtuWvcDCdbYwiUuH8i"],"license":"MIT"},"src/interfaces/modules/IVaultReader.sol":{"keccak256":"0xa687ce1a536cb890fea7462f4ac2ecc012d3531987539d00fc3240c19ffacca6","urls":["bzz-raw://b5099978a9e2b5ec2791cc2dc669055da7405918034b2feda4c49c0851f43e32","dweb:/ipfs/QmYkzk43kRSZzxDf2phdAWFguyb32MKFyfaGMhAbEQhDiz"],"license":"UNLICENSED"},"src/kStakingVault/types/BaseVaultTypes.sol":{"keccak256":"0xa6dfda9ab80c6bca9613c989fb5863c81062f8378dc22c0433ca3464ba26d4b1","urls":["bzz-raw://41dd89e20036e001eb0388e89c94e1e6c71df8f9b6155a236e0886f788e7f3ca","dweb:/ipfs/QmRkAwRBoB9yHLAdvNAy5geVu5tXDWzFKfmf5eDDECrf4T"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IkStakingVault.sol","id":51950,"exportedSymbols":{"IVault":[50861],"IVaultReader":[52753],"IkStakingVault":[51949]},"nodeType":"SourceUnit","src":"32:2717:54","nodes":[{"id":51859,"nodeType":"PragmaDirective","src":"32:23:54","nodes":[],"literals":["solidity","^","0.8",".4"]},{"id":51861,"nodeType":"ImportDirective","src":"57:38:54","nodes":[],"absolutePath":"src/interfaces/IVault.sol","file":"./IVault.sol","nameLocation":"-1:-1:-1","scope":51950,"sourceUnit":50862,"symbolAliases":[{"foreign":{"id":51860,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50861,"src":"66:6:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":51863,"nodeType":"ImportDirective","src":"96:58:54","nodes":[],"absolutePath":"src/interfaces/modules/IVaultReader.sol","file":"./modules/IVaultReader.sol","nameLocation":"-1:-1:-1","scope":51950,"sourceUnit":52754,"symbolAliases":[{"foreign":{"id":51862,"name":"IVaultReader","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52753,"src":"105:12:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":51949,"nodeType":"ContractDefinition","src":"1359:1389:54","nodes":[{"id":51874,"nodeType":"FunctionDefinition","src":"1464:49:54","nodes":[],"documentation":{"id":51869,"nodeType":"StructuredDocumentation","src":"1414:45:54","text":"@notice Returns the owner of the contract"},"functionSelector":"8da5cb5b","implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1473:5:54","parameters":{"id":51870,"nodeType":"ParameterList","parameters":[],"src":"1478:2:54"},"returnParameters":{"id":51873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51874,"src":"1504:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51871,"name":"address","nodeType":"ElementaryTypeName","src":"1504:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1503:9:54"},"scope":51949,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51880,"nodeType":"FunctionDefinition","src":"1565:54:54","nodes":[],"documentation":{"id":51875,"nodeType":"StructuredDocumentation","src":"1519:41:54","text":"@notice Returns the name of the token"},"functionSelector":"06fdde03","implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"1574:4:54","parameters":{"id":51876,"nodeType":"ParameterList","parameters":[],"src":"1578:2:54"},"returnParameters":{"id":51879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51880,"src":"1604:13:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":51877,"name":"string","nodeType":"ElementaryTypeName","src":"1604:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1603:15:54"},"scope":51949,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51886,"nodeType":"FunctionDefinition","src":"1673:56:54","nodes":[],"documentation":{"id":51881,"nodeType":"StructuredDocumentation","src":"1625:43:54","text":"@notice Returns the symbol of the token"},"functionSelector":"95d89b41","implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1682:6:54","parameters":{"id":51882,"nodeType":"ParameterList","parameters":[],"src":"1688:2:54"},"returnParameters":{"id":51885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51886,"src":"1714:13:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":51883,"name":"string","nodeType":"ElementaryTypeName","src":"1714:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1713:15:54"},"scope":51949,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51892,"nodeType":"FunctionDefinition","src":"1785:50:54","nodes":[],"documentation":{"id":51887,"nodeType":"StructuredDocumentation","src":"1735:45:54","text":"@notice Returns the decimals of the token"},"functionSelector":"313ce567","implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"1794:8:54","parameters":{"id":51888,"nodeType":"ParameterList","parameters":[],"src":"1802:2:54"},"returnParameters":{"id":51891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51892,"src":"1828:5:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":51889,"name":"uint8","nodeType":"ElementaryTypeName","src":"1828:5:54","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1827:7:54"},"scope":51949,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51898,"nodeType":"FunctionDefinition","src":"1895:55:54","nodes":[],"documentation":{"id":51893,"nodeType":"StructuredDocumentation","src":"1841:49:54","text":"@notice Returns the total supply of the token"},"functionSelector":"18160ddd","implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1904:11:54","parameters":{"id":51894,"nodeType":"ParameterList","parameters":[],"src":"1915:2:54"},"returnParameters":{"id":51897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51898,"src":"1941:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1941:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1940:9:54"},"scope":51949,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51906,"nodeType":"FunctionDefinition","src":"2017:68:54","nodes":[],"documentation":{"id":51899,"nodeType":"StructuredDocumentation","src":"1956:56:54","text":"@notice Returns the balance of the specified account"},"functionSelector":"70a08231","implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2026:9:54","parameters":{"id":51902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51901,"mutability":"mutable","name":"account","nameLocation":"2044:7:54","nodeType":"VariableDeclaration","scope":51906,"src":"2036:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51900,"name":"address","nodeType":"ElementaryTypeName","src":"2036:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2035:17:54"},"returnParameters":{"id":51905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51906,"src":"2076:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51903,"name":"uint256","nodeType":"ElementaryTypeName","src":"2076:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2075:9:54"},"scope":51949,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51916,"nodeType":"FunctionDefinition","src":"2151:70:54","nodes":[],"documentation":{"id":51907,"nodeType":"StructuredDocumentation","src":"2091:55:54","text":"@notice Transfers tokens to the specified recipient"},"functionSelector":"a9059cbb","implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"2160:8:54","parameters":{"id":51912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51909,"mutability":"mutable","name":"to","nameLocation":"2177:2:54","nodeType":"VariableDeclaration","scope":51916,"src":"2169:10:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51908,"name":"address","nodeType":"ElementaryTypeName","src":"2169:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51911,"mutability":"mutable","name":"amount","nameLocation":"2189:6:54","nodeType":"VariableDeclaration","scope":51916,"src":"2181:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51910,"name":"uint256","nodeType":"ElementaryTypeName","src":"2181:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2168:28:54"},"returnParameters":{"id":51915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51916,"src":"2215:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":51913,"name":"bool","nodeType":"ElementaryTypeName","src":"2215:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2214:6:54"},"scope":51949,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":51926,"nodeType":"FunctionDefinition","src":"2320:83:54","nodes":[],"documentation":{"id":51917,"nodeType":"StructuredDocumentation","src":"2227:88:54","text":"@notice Returns the remaining allowance that spender has to spend on behalf of owner"},"functionSelector":"dd62ed3e","implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"2329:9:54","parameters":{"id":51922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51919,"mutability":"mutable","name":"owner","nameLocation":"2347:5:54","nodeType":"VariableDeclaration","scope":51926,"src":"2339:13:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51918,"name":"address","nodeType":"ElementaryTypeName","src":"2339:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51921,"mutability":"mutable","name":"spender","nameLocation":"2362:7:54","nodeType":"VariableDeclaration","scope":51926,"src":"2354:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51920,"name":"address","nodeType":"ElementaryTypeName","src":"2354:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2338:32:54"},"returnParameters":{"id":51925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51924,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51926,"src":"2394:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51923,"name":"uint256","nodeType":"ElementaryTypeName","src":"2394:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2393:9:54"},"scope":51949,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51936,"nodeType":"FunctionDefinition","src":"2490:74:54","nodes":[],"documentation":{"id":51927,"nodeType":"StructuredDocumentation","src":"2409:76:54","text":"@notice Sets amount as the allowance of spender over the caller's tokens"},"functionSelector":"095ea7b3","implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2499:7:54","parameters":{"id":51932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51929,"mutability":"mutable","name":"spender","nameLocation":"2515:7:54","nodeType":"VariableDeclaration","scope":51936,"src":"2507:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51928,"name":"address","nodeType":"ElementaryTypeName","src":"2507:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51931,"mutability":"mutable","name":"amount","nameLocation":"2532:6:54","nodeType":"VariableDeclaration","scope":51936,"src":"2524:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51930,"name":"uint256","nodeType":"ElementaryTypeName","src":"2524:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2506:33:54"},"returnParameters":{"id":51935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51936,"src":"2558:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":51933,"name":"bool","nodeType":"ElementaryTypeName","src":"2558:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2557:6:54"},"scope":51949,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":51948,"nodeType":"FunctionDefinition","src":"2658:88:54","nodes":[],"documentation":{"id":51937,"nodeType":"StructuredDocumentation","src":"2570:83:54","text":"@notice Transfers tokens from sender to recipient using the allowance mechanism"},"functionSelector":"23b872dd","implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2667:12:54","parameters":{"id":51944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51939,"mutability":"mutable","name":"from","nameLocation":"2688:4:54","nodeType":"VariableDeclaration","scope":51948,"src":"2680:12:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51938,"name":"address","nodeType":"ElementaryTypeName","src":"2680:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51941,"mutability":"mutable","name":"to","nameLocation":"2702:2:54","nodeType":"VariableDeclaration","scope":51948,"src":"2694:10:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51940,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51943,"mutability":"mutable","name":"amount","nameLocation":"2714:6:54","nodeType":"VariableDeclaration","scope":51948,"src":"2706:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51942,"name":"uint256","nodeType":"ElementaryTypeName","src":"2706:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2679:42:54"},"returnParameters":{"id":51947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51948,"src":"2740:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":51945,"name":"bool","nodeType":"ElementaryTypeName","src":"2740:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2739:6:54"},"scope":51949,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":51865,"name":"IVault","nameLocations":["1387:6:54"],"nodeType":"IdentifierPath","referencedDeclaration":50861,"src":"1387:6:54"},"id":51866,"nodeType":"InheritanceSpecifier","src":"1387:6:54"},{"baseName":{"id":51867,"name":"IVaultReader","nameLocations":["1395:12:54"],"nodeType":"IdentifierPath","referencedDeclaration":52753,"src":"1395:12:54"},"id":51868,"nodeType":"InheritanceSpecifier","src":"1395:12:54"}],"canonicalName":"IkStakingVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":51864,"nodeType":"StructuredDocumentation","src":"156:1203:54","text":"@title IkStakingVault\n @notice Comprehensive interface combining retail staking operations with ERC20 share tokens and vault state reading\n @dev This interface aggregates all kStakingVault functionality by extending IVault (staking/batch/claims/fees) and\n IVaultReader (state queries) while adding standard ERC20 operations for stkToken management. The interface provides\n a complete view of vault capabilities: (1) Staking Operations: Full request/claim lifecycle for retail users,\n (2) Batch Management: Lifecycle control for settlement periods, (3) Share Tokens: Standard ERC20 functionality for\n stkTokens that accrue yield, (4) State Reading: Comprehensive vault metrics and calculations, (5) Fee Management:\n Performance and management fee configuration. This unified interface enables complete vault interaction through a\n single contract, simplifying integration for front-ends and external protocols while maintaining modularity through\n interface composition. The combination of vault-specific operations with standard ERC20 compatibility ensures\n stkTokens work seamlessly with existing DeFi infrastructure while providing specialized staking functionality."},"fullyImplemented":false,"linearizedBaseContracts":[51949,52753,51064,50861,51048,51008,50992],"name":"IkStakingVault","nameLocation":"1369:14:54","scope":51950,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":54}