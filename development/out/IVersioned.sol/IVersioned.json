{"abi":[{"type":"function","name":"contractName","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"contractVersion","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"contractName()":"75d0c0dc","contractVersion()":"a0a8e460"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface provides a standardized way to query contract identity and version information for upgradable contracts. It enables consistent version tracking across the protocol, supports upgrade management, and allows for contract discovery and validation. All upgradable contracts in the KAM protocol should implement this interface to maintain consistency and enable proper version control during upgrades.\",\"kind\":\"dev\",\"methods\":{\"contractName()\":{\"details\":\"Used for contract identification and logging purposes. The name should be consistent across all versions of the same contract type. This enables external systems and other contracts to identify the contract's purpose and role within the protocol ecosystem.\",\"returns\":{\"_0\":\"The contract name as a string (e.g., \\\"kMinter\\\", \\\"kAssetRouter\\\", \\\"kRegistry\\\")\"}},\"contractVersion()\":{\"details\":\"Used for upgrade management and compatibility checking within the protocol. The version string should follow semantic versioning (e.g., \\\"1.0.0\\\") to clearly indicate major, minor, and patch updates. This enables the protocol governance and monitoring systems to track deployed versions and ensure compatibility between interacting components.\",\"returns\":{\"_0\":\"The contract version as a string following semantic versioning (e.g., \\\"1.0.0\\\")\"}}},\"title\":\"IVersioned\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractName()\":{\"notice\":\"Returns the human-readable name identifier for this contract type\"},\"contractVersion()\":{\"notice\":\"Returns the version identifier for this contract implementation\"}},\"notice\":\"Standard interface for contract versioning in upgradable contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IVersioned.sol\":\"IVersioned\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":kam/src/=src/\",\":kam/test/=test/\",\":openzeppelin/=src/vendor/openzeppelin/\",\":solady/=src/vendor/solady/\",\":uniswap/=src/vendor/uniswap/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IVersioned.sol\":{\"keccak256\":\"0x23e7a218ecbf42e18656d069ee25302c74c5027d1dcfa4e1b9c54501d76a72f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e2643eaf8cc8f8bc04dd90c6cbf5c1429de314dc85e93c254b1deae782af6eb\",\"dweb:/ipfs/Qmb4s6G5PNFLy6iANEqHvanKZ3Tu1ahfW5V9ppWCxKTiDD\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"pure","type":"function","name":"contractName","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"contractVersion","outputs":[{"internalType":"string","name":"","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"contractName()":{"details":"Used for contract identification and logging purposes. The name should be consistent across all versions of the same contract type. This enables external systems and other contracts to identify the contract's purpose and role within the protocol ecosystem.","returns":{"_0":"The contract name as a string (e.g., \"kMinter\", \"kAssetRouter\", \"kRegistry\")"}},"contractVersion()":{"details":"Used for upgrade management and compatibility checking within the protocol. The version string should follow semantic versioning (e.g., \"1.0.0\") to clearly indicate major, minor, and patch updates. This enables the protocol governance and monitoring systems to track deployed versions and ensure compatibility between interacting components.","returns":{"_0":"The contract version as a string following semantic versioning (e.g., \"1.0.0\")"}}},"version":1},"userdoc":{"kind":"user","methods":{"contractName()":{"notice":"Returns the human-readable name identifier for this contract type"},"contractVersion()":{"notice":"Returns the version identifier for this contract implementation"}},"version":1}},"settings":{"remappings":["forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/","forge-std/=dependencies/forge-std-1.9.7/src/","kam/src/=src/","kam/test/=test/","openzeppelin/=src/vendor/openzeppelin/","solady/=src/vendor/solady/","uniswap/=src/vendor/uniswap/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IVersioned.sol":"IVersioned"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IVersioned.sol":{"keccak256":"0x23e7a218ecbf42e18656d069ee25302c74c5027d1dcfa4e1b9c54501d76a72f5","urls":["bzz-raw://2e2643eaf8cc8f8bc04dd90c6cbf5c1429de314dc85e93c254b1deae782af6eb","dweb:/ipfs/Qmb4s6G5PNFLy6iANEqHvanKZ3Tu1ahfW5V9ppWCxKTiDD"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IVersioned.sol","id":51145,"exportedSymbols":{"IVersioned":[51144]},"nodeType":"SourceUnit","src":"32:1740:49","nodes":[{"id":51130,"nodeType":"PragmaDirective","src":"32:23:49","nodes":[],"literals":["solidity","^","0.8",".4"]},{"id":51144,"nodeType":"ContractDefinition","src":"594:1177:49","nodes":[{"id":51137,"nodeType":"FunctionDefinition","src":"1082:62:49","nodes":[],"documentation":{"id":51132,"nodeType":"StructuredDocumentation","src":"621:456:49","text":"@notice Returns the human-readable name identifier for this contract type\n @dev Used for contract identification and logging purposes. The name should be consistent\n across all versions of the same contract type. This enables external systems and other\n contracts to identify the contract's purpose and role within the protocol ecosystem.\n @return The contract name as a string (e.g., \"kMinter\", \"kAssetRouter\", \"kRegistry\")"},"functionSelector":"75d0c0dc","implemented":false,"kind":"function","modifiers":[],"name":"contractName","nameLocation":"1091:12:49","parameters":{"id":51133,"nodeType":"ParameterList","parameters":[],"src":"1103:2:49"},"returnParameters":{"id":51136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51137,"src":"1129:13:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":51134,"name":"string","nodeType":"ElementaryTypeName","src":"1129:6:49","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1128:15:49"},"scope":51144,"stateMutability":"pure","virtual":false,"visibility":"external"},{"id":51143,"nodeType":"FunctionDefinition","src":"1704:65:49","nodes":[],"documentation":{"id":51138,"nodeType":"StructuredDocumentation","src":"1150:549:49","text":"@notice Returns the version identifier for this contract implementation\n @dev Used for upgrade management and compatibility checking within the protocol. The version\n string should follow semantic versioning (e.g., \"1.0.0\") to clearly indicate major, minor,\n and patch updates. This enables the protocol governance and monitoring systems to track\n deployed versions and ensure compatibility between interacting components.\n @return The contract version as a string following semantic versioning (e.g., \"1.0.0\")"},"functionSelector":"a0a8e460","implemented":false,"kind":"function","modifiers":[],"name":"contractVersion","nameLocation":"1713:15:49","parameters":{"id":51139,"nodeType":"ParameterList","parameters":[],"src":"1728:2:49"},"returnParameters":{"id":51142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51143,"src":"1754:13:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":51140,"name":"string","nodeType":"ElementaryTypeName","src":"1754:6:49","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1753:15:49"},"scope":51144,"stateMutability":"pure","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IVersioned","contractDependencies":[],"contractKind":"interface","documentation":{"id":51131,"nodeType":"StructuredDocumentation","src":"57:537:49","text":"@title IVersioned\n @notice Standard interface for contract versioning in upgradable contracts\n @dev This interface provides a standardized way to query contract identity and version information\n for upgradable contracts. It enables consistent version tracking across the protocol, supports\n upgrade management, and allows for contract discovery and validation. All upgradable contracts\n in the KAM protocol should implement this interface to maintain consistency and enable proper\n version control during upgrades."},"fullyImplemented":false,"linearizedBaseContracts":[51144],"name":"IVersioned","nameLocation":"604:10:49","scope":51145,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":49}