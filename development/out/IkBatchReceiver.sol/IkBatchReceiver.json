{"abi":[{"type":"function","name":"asset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"batchId","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"kMinter","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pullAssets","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"_batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"rescueAssets","inputs":[{"name":"asset_","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"event","name":"BatchReceiverInitialized","inputs":[{"name":"kMinter","type":"address","indexed":true,"internalType":"address"},{"name":"batchId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"asset","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PulledAssets","inputs":[{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"asset","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RescuedAssets","inputs":[{"name":"asset","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RescuedETH","inputs":[{"name":"asset","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"asset()":"38d52e0f","batchId()":"4972134a","kMinter()":"1948f57f","pullAssets(address,uint256,bytes32)":"5cd76354","rescueAssets(address)":"25db13f1"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kMinter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BatchReceiverInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PulledAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescuedAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescuedETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"pullAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"name\":\"rescueAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"kBatchReceiver contracts are deployed as minimal proxies (one per batch) to efficiently manage the distribution of settled assets to users who requested redemptions. This design pattern provides: (1) gas-efficient deployment since each batch gets its own isolated distribution contract, (2) clear asset segregation preventing cross-batch contamination, (3) simplified accounting where each receiver holds exactly the assets needed for one batch. The contract serves as a temporary holding mechanism - kMinter transfers settled assets to the receiver, then users can pull their proportional share. This architecture ensures fair distribution and prevents front-running during the redemption settlement process. Only the originating kMinter contract can interact with receivers, maintaining strict access control throughout the asset distribution phase.\",\"events\":{\"BatchReceiverInitialized(address,bytes32,address)\":{\"details\":\"This event marks the successful deployment and configuration of a minimal proxy receiver for a specific batch. Essential for tracking the lifecycle of batch settlement processes and enabling off-chain systems to monitor when settlement assets can begin flowing to receivers.\",\"params\":{\"asset\":\"The underlying asset address (USDC, WBTC, etc.) this receiver will distribute\",\"batchId\":\"The unique identifier of the batch this receiver will serve\",\"kMinter\":\"The address of the kMinter contract authorized to interact with this receiver\"}},\"PulledAssets(address,address,uint256)\":{\"details\":\"This event tracks the actual fulfillment of redemption requests, recording when users receive their settled assets. Critical for reconciliation and ensuring all batch participants receive their proportional share during the distribution phase.\",\"params\":{\"amount\":\"The quantity of assets successfully distributed to the receiver\",\"asset\":\"The asset contract address that was transferred\",\"receiver\":\"The address that received the distributed assets (the redeeming user)\"}},\"RescuedAssets(address,address,uint256)\":{\"details\":\"Provides a safety mechanism for recovering tokens that were mistakenly sent to the receiver outside of normal operations. This prevents permanent loss of assets while maintaining security.\",\"params\":{\"amount\":\"The quantity of tokens that were successfully rescued\",\"asset\":\"The address of the ERC20 token contract that was rescued\",\"to\":\"The address that received the rescued tokens (typically the kMinter)\"}},\"RescuedETH(address,uint256)\":{\"details\":\"Handles recovery of native ETH that was mistakenly sent to the contract, ensuring no value is permanently locked in the receiver contracts during their operational lifecycle.\",\"params\":{\"amount\":\"The amount of ETH (in wei) that was successfully rescued\",\"asset\":\"The address that received the rescued ETH (typically the kMinter)\"}}},\"kind\":\"dev\",\"methods\":{\"asset()\":{\"details\":\"Returns the asset address configured during initialization (e.g., USDC, WBTC). This determines which token type the receiver will distribute to redemption users. The asset type must match the asset that was originally deposited and requested for redemption in the batch.\",\"returns\":{\"_0\":\"The contract address of the underlying asset this receiver distributes\"}},\"batchId()\":{\"details\":\"Returns the batch ID set during initialization, which links this receiver to a specific batch of redemption requests. Used for validation when pulling assets to ensure operations are performed on the correct batch. Essential for maintaining batch isolation and preventing cross-contamination between different settlement periods.\",\"returns\":{\"_0\":\"The unique batch identifier as a bytes32 hash\"}},\"kMinter()\":{\"details\":\"Returns the immutable kMinter address set during receiver deployment. This address has exclusive permission to call pullAssets() and rescueAssets(), ensuring only the originating kMinter can manage asset distribution for this batch. Critical for maintaining access control and preventing unauthorized asset movements during the redemption settlement process.\",\"returns\":{\"_0\":\"The address of the kMinter contract with administrative permissions over this receiver\"}},\"pullAssets(address,uint256,bytes32)\":{\"details\":\"This is the core asset distribution function that fulfills redemption requests after batch settlement. The process works as follows: (1) kMinter calls this function with user's proportional share, (2) receiver validates the batch ID matches to prevent cross-batch contamination, (3) assets are transferred directly to the user completing their redemption. Only callable by the authorized kMinter contract to maintain strict access control. This function is typically called multiple times per batch as individual users claim their settled redemptions, ensuring fair and orderly asset distribution.\",\"params\":{\"_batchId\":\"The batch identifier for validation (must match this receiver's configured batch)\",\"amount\":\"The quantity of assets to transfer based on the user's proportional share\",\"receiver\":\"The address that will receive the settled assets (the user completing redemption)\"}},\"rescueAssets(address)\":{\"details\":\"Provides a safety mechanism for recovering tokens or ETH that were mistakenly sent to the receiver outside of normal settlement operations. The function handles both ERC20 tokens and native ETH recovery. For ERC20 tokens, it validates that the rescue asset is not the receiver's designated settlement asset (to prevent interfering with normal operations). Only the authorized kMinter can execute rescues, ensuring recovered assets return to the proper custodial system. Essential for maintaining protocol security while preventing accidental asset loss during the receiver contract's operational lifecycle.\",\"params\":{\"asset_\":\"The contract address of the asset to rescue (use address(0) for native ETH recovery)\"}}},\"title\":\"IkBatchReceiver\",\"version\":1},\"userdoc\":{\"events\":{\"BatchReceiverInitialized(address,bytes32,address)\":{\"notice\":\"Emitted when a new batch receiver is initialized and ready for asset distribution\"},\"PulledAssets(address,address,uint256)\":{\"notice\":\"Emitted when assets are successfully distributed from the receiver to a redemption user\"},\"RescuedAssets(address,address,uint256)\":{\"notice\":\"Emitted when accidentally sent ERC20 tokens are rescued from the receiver contract\"},\"RescuedETH(address,uint256)\":{\"notice\":\"Emitted when accidentally sent ETH is rescued from the receiver contract\"}},\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"Retrieves the underlying asset contract address managed by this receiver\"},\"batchId()\":{\"notice\":\"Retrieves the unique batch identifier this receiver serves\"},\"kMinter()\":{\"notice\":\"Retrieves the address of the kMinter contract authorized to interact with this receiver\"},\"pullAssets(address,uint256,bytes32)\":{\"notice\":\"Transfers settled assets from the receiver to a redemption user completing their withdrawal\"},\"rescueAssets(address)\":{\"notice\":\"Emergency recovery function for accidentally sent assets to prevent permanent loss\"}},\"notice\":\"Interface for minimal proxy contracts that manage asset distribution for completed batch redemptions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IkBatchReceiver.sol\":\"IkBatchReceiver\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":kam/src/=src/\",\":kam/test/=test/\",\":openzeppelin/=src/vendor/openzeppelin/\",\":solady/=src/vendor/solady/\",\":uniswap/=src/vendor/uniswap/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IkBatchReceiver.sol\":{\"keccak256\":\"0x81c5c5d994c9d7dc971e099b69e38203dd079c0d0ae45e26c7597667c5dc6555\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15a93a8717b4b1bfcc0b8fb20a5698ea9a3f7f051a7fa272aa9c9eccffdcef67\",\"dweb:/ipfs/QmTsdgUxTevHq6YmXJuKApbxPwTiAqqmsbg2mjjJyiaFX5\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"kMinter","type":"address","indexed":true},{"internalType":"bytes32","name":"batchId","type":"bytes32","indexed":true},{"internalType":"address","name":"asset","type":"address","indexed":false}],"type":"event","name":"BatchReceiverInitialized","anonymous":false},{"inputs":[{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"address","name":"asset","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"PulledAssets","anonymous":false},{"inputs":[{"internalType":"address","name":"asset","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"RescuedAssets","anonymous":false},{"inputs":[{"internalType":"address","name":"asset","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"RescuedETH","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"batchId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"kMinter","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"_batchId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"pullAssets"},{"inputs":[{"internalType":"address","name":"asset_","type":"address"}],"stateMutability":"payable","type":"function","name":"rescueAssets"}],"devdoc":{"kind":"dev","methods":{"asset()":{"details":"Returns the asset address configured during initialization (e.g., USDC, WBTC). This determines which token type the receiver will distribute to redemption users. The asset type must match the asset that was originally deposited and requested for redemption in the batch.","returns":{"_0":"The contract address of the underlying asset this receiver distributes"}},"batchId()":{"details":"Returns the batch ID set during initialization, which links this receiver to a specific batch of redemption requests. Used for validation when pulling assets to ensure operations are performed on the correct batch. Essential for maintaining batch isolation and preventing cross-contamination between different settlement periods.","returns":{"_0":"The unique batch identifier as a bytes32 hash"}},"kMinter()":{"details":"Returns the immutable kMinter address set during receiver deployment. This address has exclusive permission to call pullAssets() and rescueAssets(), ensuring only the originating kMinter can manage asset distribution for this batch. Critical for maintaining access control and preventing unauthorized asset movements during the redemption settlement process.","returns":{"_0":"The address of the kMinter contract with administrative permissions over this receiver"}},"pullAssets(address,uint256,bytes32)":{"details":"This is the core asset distribution function that fulfills redemption requests after batch settlement. The process works as follows: (1) kMinter calls this function with user's proportional share, (2) receiver validates the batch ID matches to prevent cross-batch contamination, (3) assets are transferred directly to the user completing their redemption. Only callable by the authorized kMinter contract to maintain strict access control. This function is typically called multiple times per batch as individual users claim their settled redemptions, ensuring fair and orderly asset distribution.","params":{"_batchId":"The batch identifier for validation (must match this receiver's configured batch)","amount":"The quantity of assets to transfer based on the user's proportional share","receiver":"The address that will receive the settled assets (the user completing redemption)"}},"rescueAssets(address)":{"details":"Provides a safety mechanism for recovering tokens or ETH that were mistakenly sent to the receiver outside of normal settlement operations. The function handles both ERC20 tokens and native ETH recovery. For ERC20 tokens, it validates that the rescue asset is not the receiver's designated settlement asset (to prevent interfering with normal operations). Only the authorized kMinter can execute rescues, ensuring recovered assets return to the proper custodial system. Essential for maintaining protocol security while preventing accidental asset loss during the receiver contract's operational lifecycle.","params":{"asset_":"The contract address of the asset to rescue (use address(0) for native ETH recovery)"}}},"version":1},"userdoc":{"kind":"user","methods":{"asset()":{"notice":"Retrieves the underlying asset contract address managed by this receiver"},"batchId()":{"notice":"Retrieves the unique batch identifier this receiver serves"},"kMinter()":{"notice":"Retrieves the address of the kMinter contract authorized to interact with this receiver"},"pullAssets(address,uint256,bytes32)":{"notice":"Transfers settled assets from the receiver to a redemption user completing their withdrawal"},"rescueAssets(address)":{"notice":"Emergency recovery function for accidentally sent assets to prevent permanent loss"}},"version":1}},"settings":{"remappings":["forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/","forge-std/=dependencies/forge-std-1.9.7/src/","kam/src/=src/","kam/test/=test/","openzeppelin/=src/vendor/openzeppelin/","solady/=src/vendor/solady/","uniswap/=src/vendor/uniswap/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IkBatchReceiver.sol":"IkBatchReceiver"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IkBatchReceiver.sol":{"keccak256":"0x81c5c5d994c9d7dc971e099b69e38203dd079c0d0ae45e26c7597667c5dc6555","urls":["bzz-raw://15a93a8717b4b1bfcc0b8fb20a5698ea9a3f7f051a7fa272aa9c9eccffdcef67","dweb:/ipfs/QmTsdgUxTevHq6YmXJuKApbxPwTiAqqmsbg2mjjJyiaFX5"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IkBatchReceiver.sol","id":51645,"exportedSymbols":{"IkBatchReceiver":[51644]},"nodeType":"SourceUnit","src":"32:8099:52","nodes":[{"id":51574,"nodeType":"PragmaDirective","src":"32:23:52","nodes":[],"literals":["solidity","^","0.8",".4"]},{"id":51644,"nodeType":"ContractDefinition","src":"1086:7044:52","nodes":[{"id":51584,"nodeType":"EventDefinition","src":"1979:96:52","nodes":[],"anonymous":false,"documentation":{"id":51576,"nodeType":"StructuredDocumentation","src":"1294:680:52","text":"@notice Emitted when a new batch receiver is initialized and ready for asset distribution\n @dev This event marks the successful deployment and configuration of a minimal proxy receiver\n for a specific batch. Essential for tracking the lifecycle of batch settlement processes and\n enabling off-chain systems to monitor when settlement assets can begin flowing to receivers.\n @param kMinter The address of the kMinter contract authorized to interact with this receiver\n @param batchId The unique identifier of the batch this receiver will serve\n @param asset The underlying asset address (USDC, WBTC, etc.) this receiver will distribute"},"eventSelector":"ab051ac83a2f3eb0d4acef0b16e45e830f6d966295150e6c9f1784f07be302cc","name":"BatchReceiverInitialized","nameLocation":"1985:24:52","parameters":{"id":51583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51578,"indexed":true,"mutability":"mutable","name":"kMinter","nameLocation":"2026:7:52","nodeType":"VariableDeclaration","scope":51584,"src":"2010:23:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51577,"name":"address","nodeType":"ElementaryTypeName","src":"2010:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51580,"indexed":true,"mutability":"mutable","name":"batchId","nameLocation":"2051:7:52","nodeType":"VariableDeclaration","scope":51584,"src":"2035:23:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":51579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2035:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":51582,"indexed":false,"mutability":"mutable","name":"asset","nameLocation":"2068:5:52","nodeType":"VariableDeclaration","scope":51584,"src":"2060:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51581,"name":"address","nodeType":"ElementaryTypeName","src":"2060:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2009:65:52"}},{"id":51593,"nodeType":"EventDefinition","src":"2707:84:52","nodes":[],"anonymous":false,"documentation":{"id":51585,"nodeType":"StructuredDocumentation","src":"2081:621:52","text":"@notice Emitted when assets are successfully distributed from the receiver to a redemption user\n @dev This event tracks the actual fulfillment of redemption requests, recording when users\n receive their settled assets. Critical for reconciliation and ensuring all batch participants\n receive their proportional share during the distribution phase.\n @param receiver The address that received the distributed assets (the redeeming user)\n @param asset The asset contract address that was transferred\n @param amount The quantity of assets successfully distributed to the receiver"},"eventSelector":"b7acbf17ad94b6f877e46c72718225d94e660fd48f2e46f65942f2f4cce22027","name":"PulledAssets","nameLocation":"2713:12:52","parameters":{"id":51592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51587,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"2742:8:52","nodeType":"VariableDeclaration","scope":51593,"src":"2726:24:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51586,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51589,"indexed":true,"mutability":"mutable","name":"asset","nameLocation":"2768:5:52","nodeType":"VariableDeclaration","scope":51593,"src":"2752:21:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51588,"name":"address","nodeType":"ElementaryTypeName","src":"2752:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51591,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2783:6:52","nodeType":"VariableDeclaration","scope":51593,"src":"2775:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51590,"name":"uint256","nodeType":"ElementaryTypeName","src":"2775:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2725:65:52"}},{"id":51602,"nodeType":"EventDefinition","src":"3347:79:52","nodes":[],"anonymous":false,"documentation":{"id":51594,"nodeType":"StructuredDocumentation","src":"2797:545:52","text":"@notice Emitted when accidentally sent ERC20 tokens are rescued from the receiver contract\n @dev Provides a safety mechanism for recovering tokens that were mistakenly sent to the receiver\n outside of normal operations. This prevents permanent loss of assets while maintaining security.\n @param asset The address of the ERC20 token contract that was rescued\n @param to The address that received the rescued tokens (typically the kMinter)\n @param amount The quantity of tokens that were successfully rescued"},"eventSelector":"552c8f8dc30f2786e14004d98595afcc1c0ea1f552b86e86f64a2da74761eaab","name":"RescuedAssets","nameLocation":"3353:13:52","parameters":{"id":51601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51596,"indexed":true,"mutability":"mutable","name":"asset","nameLocation":"3383:5:52","nodeType":"VariableDeclaration","scope":51602,"src":"3367:21:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51595,"name":"address","nodeType":"ElementaryTypeName","src":"3367:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51598,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"3406:2:52","nodeType":"VariableDeclaration","scope":51602,"src":"3390:18:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51597,"name":"address","nodeType":"ElementaryTypeName","src":"3390:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51600,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3418:6:52","nodeType":"VariableDeclaration","scope":51602,"src":"3410:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51599,"name":"uint256","nodeType":"ElementaryTypeName","src":"3410:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3366:59:52"}},{"id":51609,"nodeType":"EventDefinition","src":"3883:56:52","nodes":[],"anonymous":false,"documentation":{"id":51603,"nodeType":"StructuredDocumentation","src":"3432:446:52","text":"@notice Emitted when accidentally sent ETH is rescued from the receiver contract\n @dev Handles recovery of native ETH that was mistakenly sent to the contract, ensuring no\n value is permanently locked in the receiver contracts during their operational lifecycle.\n @param asset The address that received the rescued ETH (typically the kMinter)\n @param amount The amount of ETH (in wei) that was successfully rescued"},"eventSelector":"63b8c8e180bc85c19daef23e2bb787fb49672d3a9ecde24409c18ccb1accb5d1","name":"RescuedETH","nameLocation":"3889:10:52","parameters":{"id":51608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51605,"indexed":true,"mutability":"mutable","name":"asset","nameLocation":"3916:5:52","nodeType":"VariableDeclaration","scope":51609,"src":"3900:21:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51604,"name":"address","nodeType":"ElementaryTypeName","src":"3900:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51607,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3931:6:52","nodeType":"VariableDeclaration","scope":51609,"src":"3923:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51606,"name":"uint256","nodeType":"ElementaryTypeName","src":"3923:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3899:39:52"}},{"id":51615,"nodeType":"FunctionDefinition","src":"4725:51:52","nodes":[],"documentation":{"id":51610,"nodeType":"StructuredDocumentation","src":"4122:598:52","text":"@notice Retrieves the address of the kMinter contract authorized to interact with this receiver\n @dev Returns the immutable kMinter address set during receiver deployment. This address has\n exclusive permission to call pullAssets() and rescueAssets(), ensuring only the originating\n kMinter can manage asset distribution for this batch. Critical for maintaining access control\n and preventing unauthorized asset movements during the redemption settlement process.\n @return The address of the kMinter contract with administrative permissions over this receiver"},"functionSelector":"1948f57f","implemented":false,"kind":"function","modifiers":[],"name":"kMinter","nameLocation":"4734:7:52","parameters":{"id":51611,"nodeType":"ParameterList","parameters":[],"src":"4741:2:52"},"returnParameters":{"id":51614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51615,"src":"4767:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51612,"name":"address","nodeType":"ElementaryTypeName","src":"4767:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4766:9:52"},"scope":51644,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51621,"nodeType":"FunctionDefinition","src":"5258:49:52","nodes":[],"documentation":{"id":51616,"nodeType":"StructuredDocumentation","src":"4782:471:52","text":"@notice Retrieves the underlying asset contract address managed by this receiver\n @dev Returns the asset address configured during initialization (e.g., USDC, WBTC). This\n determines which token type the receiver will distribute to redemption users. The asset type\n must match the asset that was originally deposited and requested for redemption in the batch.\n @return The contract address of the underlying asset this receiver distributes"},"functionSelector":"38d52e0f","implemented":false,"kind":"function","modifiers":[],"name":"asset","nameLocation":"5267:5:52","parameters":{"id":51617,"nodeType":"ParameterList","parameters":[],"src":"5272:2:52"},"returnParameters":{"id":51620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51621,"src":"5298:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51618,"name":"address","nodeType":"ElementaryTypeName","src":"5298:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5297:9:52"},"scope":51644,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51627,"nodeType":"FunctionDefinition","src":"5817:51:52","nodes":[],"documentation":{"id":51622,"nodeType":"StructuredDocumentation","src":"5313:499:52","text":"@notice Retrieves the unique batch identifier this receiver serves\n @dev Returns the batch ID set during initialization, which links this receiver to a specific\n batch of redemption requests. Used for validation when pulling assets to ensure operations\n are performed on the correct batch. Essential for maintaining batch isolation and preventing\n cross-contamination between different settlement periods.\n @return The unique batch identifier as a bytes32 hash"},"functionSelector":"4972134a","implemented":false,"kind":"function","modifiers":[],"name":"batchId","nameLocation":"5826:7:52","parameters":{"id":51623,"nodeType":"ParameterList","parameters":[],"src":"5833:2:52"},"returnParameters":{"id":51626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51627,"src":"5859:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":51624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5859:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5858:9:52"},"scope":51644,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":51637,"nodeType":"FunctionDefinition","src":"7120:81:52","nodes":[],"documentation":{"id":51628,"nodeType":"StructuredDocumentation","src":"6053:1062:52","text":"@notice Transfers settled assets from the receiver to a redemption user completing their withdrawal\n @dev This is the core asset distribution function that fulfills redemption requests after batch settlement.\n The process works as follows: (1) kMinter calls this function with user's proportional share, (2) receiver\n validates the batch ID matches to prevent cross-batch contamination, (3) assets are transferred directly\n to the user completing their redemption. Only callable by the authorized kMinter contract to maintain strict\n access control. This function is typically called multiple times per batch as individual users claim their\n settled redemptions, ensuring fair and orderly asset distribution.\n @param receiver The address that will receive the settled assets (the user completing redemption)\n @param amount The quantity of assets to transfer based on the user's proportional share\n @param _batchId The batch identifier for validation (must match this receiver's configured batch)"},"functionSelector":"5cd76354","implemented":false,"kind":"function","modifiers":[],"name":"pullAssets","nameLocation":"7129:10:52","parameters":{"id":51635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51630,"mutability":"mutable","name":"receiver","nameLocation":"7148:8:52","nodeType":"VariableDeclaration","scope":51637,"src":"7140:16:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51629,"name":"address","nodeType":"ElementaryTypeName","src":"7140:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51632,"mutability":"mutable","name":"amount","nameLocation":"7166:6:52","nodeType":"VariableDeclaration","scope":51637,"src":"7158:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51631,"name":"uint256","nodeType":"ElementaryTypeName","src":"7158:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":51634,"mutability":"mutable","name":"_batchId","nameLocation":"7182:8:52","nodeType":"VariableDeclaration","scope":51637,"src":"7174:16:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":51633,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7139:52:52"},"returnParameters":{"id":51636,"nodeType":"ParameterList","parameters":[],"src":"7200:0:52"},"scope":51644,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":51643,"nodeType":"FunctionDefinition","src":"8073:55:52","nodes":[],"documentation":{"id":51638,"nodeType":"StructuredDocumentation","src":"7207:861:52","text":"@notice Emergency recovery function for accidentally sent assets to prevent permanent loss\n @dev Provides a safety mechanism for recovering tokens or ETH that were mistakenly sent to the receiver\n outside of normal settlement operations. The function handles both ERC20 tokens and native ETH recovery.\n For ERC20 tokens, it validates that the rescue asset is not the receiver's designated settlement asset\n (to prevent interfering with normal operations). Only the authorized kMinter can execute rescues, ensuring\n recovered assets return to the proper custodial system. Essential for maintaining protocol security while\n preventing accidental asset loss during the receiver contract's operational lifecycle.\n @param asset_ The contract address of the asset to rescue (use address(0) for native ETH recovery)"},"functionSelector":"25db13f1","implemented":false,"kind":"function","modifiers":[],"name":"rescueAssets","nameLocation":"8082:12:52","parameters":{"id":51641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51640,"mutability":"mutable","name":"asset_","nameLocation":"8103:6:52","nodeType":"VariableDeclaration","scope":51643,"src":"8095:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51639,"name":"address","nodeType":"ElementaryTypeName","src":"8095:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8094:16:52"},"returnParameters":{"id":51642,"nodeType":"ParameterList","parameters":[],"src":"8127:0:52"},"scope":51644,"stateMutability":"payable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IkBatchReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":51575,"nodeType":"StructuredDocumentation","src":"57:1029:52","text":"@title IkBatchReceiver\n @notice Interface for minimal proxy contracts that manage asset distribution for completed batch redemptions\n @dev kBatchReceiver contracts are deployed as minimal proxies (one per batch) to efficiently manage the distribution\n of settled assets to users who requested redemptions. This design pattern provides: (1) gas-efficient deployment\n since each batch gets its own isolated distribution contract, (2) clear asset segregation preventing cross-batch\n contamination, (3) simplified accounting where each receiver holds exactly the assets needed for one batch.\n The contract serves as a temporary holding mechanism - kMinter transfers settled assets to the receiver, then users\n can pull their proportional share. This architecture ensures fair distribution and prevents front-running during\n the redemption settlement process. Only the originating kMinter contract can interact with receivers, maintaining\n strict access control throughout the asset distribution phase."},"fullyImplemented":false,"linearizedBaseContracts":[51644],"name":"IkBatchReceiver","nameLocation":"1096:15:52","scope":51645,"usedErrors":[],"usedEvents":[51584,51593,51602,51609]}],"license":"MIT"},"id":52}