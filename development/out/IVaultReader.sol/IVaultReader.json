{"abi":[{"type":"function","name":"asset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"computeLastBatchFees","inputs":[],"outputs":[{"name":"managementFees","type":"uint256","internalType":"uint256"},{"name":"performanceFees","type":"uint256","internalType":"uint256"},{"name":"totalFees","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"contractName","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"contractVersion","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"convertToAssets","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"convertToAssetsWithTotals","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"totalAssets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"convertToShares","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"convertToSharesWithTotals","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"totalAssets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBatchId","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBatchIdInfo","inputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"batchReceiver","type":"address","internalType":"address"},{"name":"isClosed","type":"bool","internalType":"bool"},{"name":"isSettled","type":"bool","internalType":"bool"},{"name":"sharePrice","type":"uint256","internalType":"uint256"},{"name":"netSharePrice","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBatchReceiver","inputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getCurrentBatchInfo","inputs":[],"outputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"},{"name":"batchReceiver","type":"address","internalType":"address"},{"name":"isClosed","type":"bool","internalType":"bool"},{"name":"isSettled","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getSafeBatchId","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getSafeBatchReceiver","inputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getStakeRequest","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"stakeRequest","type":"tuple","internalType":"struct BaseVaultTypes.StakeRequest","components":[{"name":"user","type":"address","internalType":"address"},{"name":"kTokenAmount","type":"uint128","internalType":"uint128"},{"name":"recipient","type":"address","internalType":"address"},{"name":"batchId","type":"bytes32","internalType":"bytes32"},{"name":"requestTimestamp","type":"uint64","internalType":"uint64"},{"name":"status","type":"uint8","internalType":"enum BaseVaultTypes.RequestStatus"}]}],"stateMutability":"view"},{"type":"function","name":"getTotalPendingStake","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUnstakeRequest","inputs":[{"name":"requestId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"unstakeRequest","type":"tuple","internalType":"struct BaseVaultTypes.UnstakeRequest","components":[{"name":"user","type":"address","internalType":"address"},{"name":"stkTokenAmount","type":"uint128","internalType":"uint128"},{"name":"recipient","type":"address","internalType":"address"},{"name":"batchId","type":"bytes32","internalType":"bytes32"},{"name":"requestTimestamp","type":"uint64","internalType":"uint64"},{"name":"status","type":"uint8","internalType":"enum BaseVaultTypes.RequestStatus"}]}],"stateMutability":"view"},{"type":"function","name":"getUserRequests","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"requestIds","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"view"},{"type":"function","name":"hurdleRate","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"isBatchClosed","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isBatchSettled","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isHardHurdleRate","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lastFeesChargedManagement","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"lastFeesChargedPerformance","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"managementFee","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"netSharePrice","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"nextManagementFeeTimestamp","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"nextPerformanceFeeTimestamp","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"performanceFee","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"registry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"sharePrice","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"sharePriceWatermark","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalNetAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"underlyingAsset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"asset()":"38d52e0f","computeLastBatchFees()":"cf0597ed","contractName()":"75d0c0dc","contractVersion()":"a0a8e460","convertToAssets(uint256)":"07a2d13a","convertToAssetsWithTotals(uint256,uint256)":"9ff217fe","convertToShares(uint256)":"c6e6f592","convertToSharesWithTotals(uint256,uint256)":"ef3066d4","getBatchId()":"7b27b9ee","getBatchIdInfo(bytes32)":"aa2e3343","getBatchReceiver(bytes32)":"befe3170","getCurrentBatchInfo()":"72674eb6","getSafeBatchId()":"5308394f","getSafeBatchReceiver(bytes32)":"5e3d5f7f","getStakeRequest(bytes32)":"ac219343","getTotalPendingStake()":"4389a279","getUnstakeRequest(bytes32)":"a625e721","getUserRequests(address)":"b337cf74","hurdleRate()":"8297f431","isBatchClosed()":"78e36ac9","isBatchSettled()":"b5e9f485","isHardHurdleRate()":"07fee228","lastFeesChargedManagement()":"8d5c009a","lastFeesChargedPerformance()":"d0395ddb","managementFee()":"a6f7f5d6","netSharePrice()":"b1791c0d","nextManagementFeeTimestamp()":"52b09688","nextPerformanceFeeTimestamp()":"77f00194","performanceFee()":"87788782","registry()":"7b103999","sharePrice()":"87269729","sharePriceWatermark()":"34a44bd5","totalAssets()":"01e1d114","totalNetAssets()":"890a8c4f","underlyingAsset()":"7158da7c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeLastBatchFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"managementFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"}],\"name\":\"convertToAssetsWithTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"}],\"name\":\"convertToSharesWithTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"name\":\"getBatchIdInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"batchReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netSharePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"name\":\"getBatchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBatchInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"batchReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"name\":\"getSafeBatchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getStakeRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"kTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"requestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum BaseVaultTypes.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BaseVaultTypes.StakeRequest\",\"name\":\"stakeRequest\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getUnstakeRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"stkTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"requestTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum BaseVaultTypes.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BaseVaultTypes.UnstakeRequest\",\"name\":\"unstakeRequest\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRequests\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"requestIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hurdleRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBatchClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBatchSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHardHurdleRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeesChargedManagement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeesChargedPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextManagementFeeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPerformanceFeeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePriceWatermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNetAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface provides comprehensive access to vault information for external integrations, front-ends, and analytics without gas costs or state modifications. The interface covers several key areas: (1) Configuration: Registry references, underlying assets, and fee parameters, (2) Financial Metrics: Share prices, total assets, and fee calculations for accurate vault valuation, (3) Batch Information: Current and historical batch states for settlement tracking, (4) Fee Calculations: Real-time fee accruals and next fee timestamps, (5) Safety Functions: Validated batch ID and receiver retrieval preventing errors. This read-only approach enables efficient monitoring and integration while maintaining clear separation from state-modifying operations. All calculations reflect current vault state including pending fees and accrued yields, providing accurate real-time vault metrics for users and integrations.\",\"kind\":\"dev\",\"methods\":{\"asset()\":{\"returns\":{\"_0\":\"Address of this vault's stkToken contract representing user shares\"}},\"computeLastBatchFees()\":{\"details\":\"Computes real-time fee accruals based on time elapsed and vault performance since last fee charge. Management fees accrue continuously based on assets under management and time passed. Performance fees are calculated on share price appreciation above watermarks and hurdle rates. This function provides accurate fee projections for settlement planning and user transparency without modifying state.\",\"returns\":{\"managementFees\":\"Accrued management fees in underlying asset terms\",\"performanceFees\":\"Accrued performance fees in underlying asset terms\",\"totalFees\":\"Combined management and performance fees for total fee burden\"}},\"contractName()\":{\"details\":\"Used for contract identification and logging purposes. The name should be consistent across all versions of the same contract type. This enables external systems and other contracts to identify the contract's purpose and role within the protocol ecosystem.\",\"returns\":{\"_0\":\"The contract name as a string (e.g., \\\"kMinter\\\", \\\"kAssetRouter\\\", \\\"kRegistry\\\")\"}},\"contractVersion()\":{\"details\":\"Used for upgrade management and compatibility checking within the protocol. The version string should follow semantic versioning (e.g., \\\"1.0.0\\\") to clearly indicate major, minor, and patch updates. This enables the protocol governance and monitoring systems to track deployed versions and ensure compatibility between interacting components.\",\"returns\":{\"_0\":\"The contract version as a string following semantic versioning (e.g., \\\"1.0.0\\\")\"}},\"convertToAssets(uint256)\":{\"params\":{\"assets\":\"The amount of assets to convert\"},\"returns\":{\"_0\":\"The equivalent amount of shares\"}},\"convertToAssetsWithTotals(uint256,uint256)\":{\"params\":{\"shares\":\"The amount of shares to convert\",\"totalAssets\":\"The total assets available for conversion\"},\"returns\":{\"_0\":\"The equivalent amount of assets\"}},\"convertToShares(uint256)\":{\"params\":{\"shares\":\"The amount of shares to convert\"},\"returns\":{\"_0\":\"The equivalent amount of assets\"}},\"convertToSharesWithTotals(uint256,uint256)\":{\"params\":{\"assets\":\"The amount of assets to convert\",\"totalAssets\":\"The total assets available for conversion\"},\"returns\":{\"_0\":\"The equivalent amount of shares\"}},\"getBatchId()\":{\"returns\":{\"_0\":\"Current batch ID for new requests\"}},\"getBatchIdInfo(bytes32)\":{\"params\":{\"batchId\":\"The batch identifier to query\"},\"returns\":{\"batchReceiver\":\"Address of batch receiver contract (may be zero if not deployed)\",\"isClosed\":\"Whether the batch is closed to new requests\",\"isSettled\":\"Whether the batch has been settled\",\"netSharePrice\":\"Net share price of settlement\",\"sharePrice\":\"Share price of settlement\"}},\"getBatchReceiver(bytes32)\":{\"params\":{\"batchId\":\"The batch identifier to query\"},\"returns\":{\"_0\":\"Address of the batch receiver (may be zero if not deployed)\"}},\"getCurrentBatchInfo()\":{\"returns\":{\"batchId\":\"Current batch identifier\",\"batchReceiver\":\"Address of batch receiver contract (may be zero if not created)\",\"isClosed\":\"Whether the batch is closed to new requests\",\"isSettled\":\"Whether the batch has been settled\"}},\"getSafeBatchId()\":{\"returns\":{\"_0\":\"Current batch ID (guaranteed to be valid and initialized)\"}},\"getSafeBatchReceiver(bytes32)\":{\"params\":{\"batchId\":\"The batch identifier to query\"},\"returns\":{\"_0\":\"Address of the batch receiver (guaranteed non-zero)\"}},\"getStakeRequest(bytes32)\":{\"params\":{\"requestId\":\"The unique identifier of the stake request\"},\"returns\":{\"stakeRequest\":\"The stake request struct containing all request details\"}},\"getTotalPendingStake()\":{\"returns\":{\"_0\":\"Total pending stake amount\"}},\"getUnstakeRequest(bytes32)\":{\"params\":{\"requestId\":\"The unique identifier of the unstake request\"},\"returns\":{\"unstakeRequest\":\"The unstake request struct containing all request details\"}},\"getUserRequests(address)\":{\"params\":{\"user\":\"The address to query requests for\"},\"returns\":{\"requestIds\":\"An array of all request IDs (both stake and unstake) for the user\"}},\"hurdleRate()\":{\"returns\":{\"_0\":\"Hurdle rate in basis points that vault performance must exceed\"}},\"isBatchClosed()\":{\"returns\":{\"_0\":\"True if current batch is closed and awaiting settlement\"}},\"isBatchSettled()\":{\"returns\":{\"_0\":\"True if current batch is settled and ready for claims\"}},\"isHardHurdleRate()\":{\"returns\":{\"_0\":\"True if the current hurdle rate is a hard hurdle rate, false otherwise\"}},\"lastFeesChargedManagement()\":{\"returns\":{\"_0\":\"Timestamp of last management fee charge for accrual calculations\"}},\"lastFeesChargedPerformance()\":{\"returns\":{\"_0\":\"Timestamp of last performance fee charge for watermark tracking\"}},\"managementFee()\":{\"returns\":{\"_0\":\"Management fee rate in basis points (1% = 100)\"}},\"netSharePrice()\":{\"details\":\"Returns net share price after fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.\",\"returns\":{\"_0\":\"Share price per stkToken in underlying asset terms (scaled to token decimals)\"}},\"nextManagementFeeTimestamp()\":{\"returns\":{\"_0\":\"Projected timestamp for next management fee evaluation\"}},\"nextPerformanceFeeTimestamp()\":{\"returns\":{\"_0\":\"Projected timestamp for next performance fee evaluation\"}},\"performanceFee()\":{\"returns\":{\"_0\":\"Performance fee rate in basis points (1% = 100)\"}},\"registry()\":{\"returns\":{\"_0\":\"Address of the kRegistry contract managing protocol-wide settings\"}},\"sharePrice()\":{\"details\":\"Returns gross share price before fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.\",\"returns\":{\"_0\":\"Share price per stkToken in underlying asset terms (scaled to token decimals)\"}},\"sharePriceWatermark()\":{\"details\":\"The watermark tracks the highest share price achieved, ensuring performance fees are only charged on new highs and preventing double-charging on recovered losses. Reset occurs when new high watermarks are achieved, establishing a new baseline for future performance fee calculations.\",\"returns\":{\"_0\":\"Current high watermark share price in underlying asset terms\"}},\"totalAssets()\":{\"returns\":{\"_0\":\"Total asset value managed by the vault in underlying asset terms\"}},\"totalNetAssets()\":{\"details\":\"Provides user-facing asset value after management and performance fee deductions. Used for accurate user balance calculations and net yield reporting.\",\"returns\":{\"_0\":\"Net asset value available to users after fee deductions\"}},\"underlyingAsset()\":{\"returns\":{\"_0\":\"Address of the base asset (USDC, WBTC, etc.) managed by this vault\"}}},\"title\":\"IVaultReader\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"Returns the vault's share token (stkToken) address for ERC20 operations\"},\"computeLastBatchFees()\":{\"notice\":\"Calculates accumulated fees for the current period including management and performance components\"},\"contractName()\":{\"notice\":\"Returns the human-readable name identifier for this contract type\"},\"contractVersion()\":{\"notice\":\"Returns the version identifier for this contract implementation\"},\"convertToAssets(uint256)\":{\"notice\":\"Converts a given amount of assets to shares\"},\"convertToAssetsWithTotals(uint256,uint256)\":{\"notice\":\"Converts a given amount of shares to assets with a specified total assets\"},\"convertToShares(uint256)\":{\"notice\":\"Converts a given amount of shares to assets\"},\"convertToSharesWithTotals(uint256,uint256)\":{\"notice\":\"Converts a given amount of assets to shares with a specified total assets\"},\"getBatchId()\":{\"notice\":\"Returns the current active batch identifier\"},\"getBatchIdInfo(bytes32)\":{\"notice\":\"Returns comprehensive information about a specific batch\"},\"getBatchReceiver(bytes32)\":{\"notice\":\"Returns the batch receiver address for a specific batch ID\"},\"getCurrentBatchInfo()\":{\"notice\":\"Returns comprehensive information about the current batch\"},\"getSafeBatchId()\":{\"notice\":\"Returns current batch ID with safety validation\"},\"getSafeBatchReceiver(bytes32)\":{\"notice\":\"Returns batch receiver address with validation, creating if necessary\"},\"getStakeRequest(bytes32)\":{\"notice\":\"Gets the details of a specific stake request\"},\"getTotalPendingStake()\":{\"notice\":\"Returns the total pending stake amount\"},\"getUnstakeRequest(bytes32)\":{\"notice\":\"Gets the details of a specific unstake request\"},\"getUserRequests(address)\":{\"notice\":\"Gets all request IDs associated with a user\"},\"hurdleRate()\":{\"notice\":\"Returns the hurdle rate threshold for performance fee calculations\"},\"isBatchClosed()\":{\"notice\":\"Checks if the current batch is closed to new requests\"},\"isBatchSettled()\":{\"notice\":\"Checks if the current batch has been settled with finalized prices\"},\"isHardHurdleRate()\":{\"notice\":\"Returns whether the current hurdle rate is a hard hurdle rate\"},\"lastFeesChargedManagement()\":{\"notice\":\"Returns the timestamp when management fees were last processed\"},\"lastFeesChargedPerformance()\":{\"notice\":\"Returns the timestamp when performance fees were last processed\"},\"managementFee()\":{\"notice\":\"Returns the current management fee rate charged on assets under management\"},\"netSharePrice()\":{\"notice\":\"Calculates current share price including all accrued yields\"},\"nextManagementFeeTimestamp()\":{\"notice\":\"Calculates the next timestamp when management fees can be charged\"},\"nextPerformanceFeeTimestamp()\":{\"notice\":\"Calculates the next timestamp when performance fees can be charged\"},\"performanceFee()\":{\"notice\":\"Returns the current performance fee rate charged on excess returns\"},\"registry()\":{\"notice\":\"Returns the protocol registry address for configuration and role management\"},\"sharePrice()\":{\"notice\":\"Calculates current share price including all accrued yields\"},\"sharePriceWatermark()\":{\"notice\":\"Returns the high watermark used for performance fee calculations\"},\"totalAssets()\":{\"notice\":\"Returns total assets under management including pending fees\"},\"totalNetAssets()\":{\"notice\":\"Returns net assets after deducting accumulated fees\"},\"underlyingAsset()\":{\"notice\":\"Returns the underlying asset address that this vault generates yield on\"}},\"notice\":\"Read-only interface for querying vault state, calculations, and metrics without modifying contract state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/modules/IVaultReader.sol\":\"IVaultReader\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":kam/src/=src/\",\":kam/test/=test/\",\":openzeppelin/=src/vendor/openzeppelin/\",\":solady/=src/vendor/solady/\",\":uniswap/=src/vendor/uniswap/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IVersioned.sol\":{\"keccak256\":\"0x23e7a218ecbf42e18656d069ee25302c74c5027d1dcfa4e1b9c54501d76a72f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e2643eaf8cc8f8bc04dd90c6cbf5c1429de314dc85e93c254b1deae782af6eb\",\"dweb:/ipfs/Qmb4s6G5PNFLy6iANEqHvanKZ3Tu1ahfW5V9ppWCxKTiDD\"]},\"src/interfaces/modules/IVaultReader.sol\":{\"keccak256\":\"0xf074699a11424105c3203c5d998fcb1379ef0241cdb9254f130cac2fae6fb539\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://34380049ab5d23166f819036e72b8ad4142efc88a02914e00665902b9ec0d040\",\"dweb:/ipfs/QmUHqFJfUUrj2JFyY1y7VwhgasnaNUVPWmZV3LZaMaVAeq\"]},\"src/kStakingVault/types/BaseVaultTypes.sol\":{\"keccak256\":\"0xa6dfda9ab80c6bca9613c989fb5863c81062f8378dc22c0433ca3464ba26d4b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41dd89e20036e001eb0388e89c94e1e6c71df8f9b6155a236e0886f788e7f3ca\",\"dweb:/ipfs/QmRkAwRBoB9yHLAdvNAy5geVu5tXDWzFKfmf5eDDECrf4T\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"computeLastBatchFees","outputs":[{"internalType":"uint256","name":"managementFees","type":"uint256"},{"internalType":"uint256","name":"performanceFees","type":"uint256"},{"internalType":"uint256","name":"totalFees","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"contractName","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"contractVersion","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"uint256","name":"totalAssets","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToAssetsWithTotals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"uint256","name":"totalAssets","type":"uint256"}],"stateMutability":"view","type":"function","name":"convertToSharesWithTotals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBatchId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBatchIdInfo","outputs":[{"internalType":"address","name":"batchReceiver","type":"address"},{"internalType":"bool","name":"isClosed","type":"bool"},{"internalType":"bool","name":"isSettled","type":"bool"},{"internalType":"uint256","name":"sharePrice","type":"uint256"},{"internalType":"uint256","name":"netSharePrice","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBatchReceiver","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentBatchInfo","outputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"},{"internalType":"address","name":"batchReceiver","type":"address"},{"internalType":"bool","name":"isClosed","type":"bool"},{"internalType":"bool","name":"isSettled","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getSafeBatchId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getSafeBatchReceiver","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getStakeRequest","outputs":[{"internalType":"struct BaseVaultTypes.StakeRequest","name":"stakeRequest","type":"tuple","components":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint128","name":"kTokenAmount","type":"uint128"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"batchId","type":"bytes32"},{"internalType":"uint64","name":"requestTimestamp","type":"uint64"},{"internalType":"enum BaseVaultTypes.RequestStatus","name":"status","type":"uint8"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getTotalPendingStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getUnstakeRequest","outputs":[{"internalType":"struct BaseVaultTypes.UnstakeRequest","name":"unstakeRequest","type":"tuple","components":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint128","name":"stkTokenAmount","type":"uint128"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"batchId","type":"bytes32"},{"internalType":"uint64","name":"requestTimestamp","type":"uint64"},{"internalType":"enum BaseVaultTypes.RequestStatus","name":"status","type":"uint8"}]}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getUserRequests","outputs":[{"internalType":"bytes32[]","name":"requestIds","type":"bytes32[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"hurdleRate","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isBatchClosed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isBatchSettled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isHardHurdleRate","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastFeesChargedManagement","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"lastFeesChargedPerformance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"managementFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"netSharePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"nextManagementFeeTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"nextPerformanceFeeTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"performanceFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"registry","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"sharePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"sharePriceWatermark","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalNetAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"underlyingAsset","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"asset()":{"returns":{"_0":"Address of this vault's stkToken contract representing user shares"}},"computeLastBatchFees()":{"details":"Computes real-time fee accruals based on time elapsed and vault performance since last fee charge. Management fees accrue continuously based on assets under management and time passed. Performance fees are calculated on share price appreciation above watermarks and hurdle rates. This function provides accurate fee projections for settlement planning and user transparency without modifying state.","returns":{"managementFees":"Accrued management fees in underlying asset terms","performanceFees":"Accrued performance fees in underlying asset terms","totalFees":"Combined management and performance fees for total fee burden"}},"contractName()":{"details":"Used for contract identification and logging purposes. The name should be consistent across all versions of the same contract type. This enables external systems and other contracts to identify the contract's purpose and role within the protocol ecosystem.","returns":{"_0":"The contract name as a string (e.g., \"kMinter\", \"kAssetRouter\", \"kRegistry\")"}},"contractVersion()":{"details":"Used for upgrade management and compatibility checking within the protocol. The version string should follow semantic versioning (e.g., \"1.0.0\") to clearly indicate major, minor, and patch updates. This enables the protocol governance and monitoring systems to track deployed versions and ensure compatibility between interacting components.","returns":{"_0":"The contract version as a string following semantic versioning (e.g., \"1.0.0\")"}},"convertToAssets(uint256)":{"params":{"assets":"The amount of assets to convert"},"returns":{"_0":"The equivalent amount of shares"}},"convertToAssetsWithTotals(uint256,uint256)":{"params":{"shares":"The amount of shares to convert","totalAssets":"The total assets available for conversion"},"returns":{"_0":"The equivalent amount of assets"}},"convertToShares(uint256)":{"params":{"shares":"The amount of shares to convert"},"returns":{"_0":"The equivalent amount of assets"}},"convertToSharesWithTotals(uint256,uint256)":{"params":{"assets":"The amount of assets to convert","totalAssets":"The total assets available for conversion"},"returns":{"_0":"The equivalent amount of shares"}},"getBatchId()":{"returns":{"_0":"Current batch ID for new requests"}},"getBatchIdInfo(bytes32)":{"params":{"batchId":"The batch identifier to query"},"returns":{"batchReceiver":"Address of batch receiver contract (may be zero if not deployed)","isClosed":"Whether the batch is closed to new requests","isSettled":"Whether the batch has been settled","netSharePrice":"Net share price of settlement","sharePrice":"Share price of settlement"}},"getBatchReceiver(bytes32)":{"params":{"batchId":"The batch identifier to query"},"returns":{"_0":"Address of the batch receiver (may be zero if not deployed)"}},"getCurrentBatchInfo()":{"returns":{"batchId":"Current batch identifier","batchReceiver":"Address of batch receiver contract (may be zero if not created)","isClosed":"Whether the batch is closed to new requests","isSettled":"Whether the batch has been settled"}},"getSafeBatchId()":{"returns":{"_0":"Current batch ID (guaranteed to be valid and initialized)"}},"getSafeBatchReceiver(bytes32)":{"params":{"batchId":"The batch identifier to query"},"returns":{"_0":"Address of the batch receiver (guaranteed non-zero)"}},"getStakeRequest(bytes32)":{"params":{"requestId":"The unique identifier of the stake request"},"returns":{"stakeRequest":"The stake request struct containing all request details"}},"getTotalPendingStake()":{"returns":{"_0":"Total pending stake amount"}},"getUnstakeRequest(bytes32)":{"params":{"requestId":"The unique identifier of the unstake request"},"returns":{"unstakeRequest":"The unstake request struct containing all request details"}},"getUserRequests(address)":{"params":{"user":"The address to query requests for"},"returns":{"requestIds":"An array of all request IDs (both stake and unstake) for the user"}},"hurdleRate()":{"returns":{"_0":"Hurdle rate in basis points that vault performance must exceed"}},"isBatchClosed()":{"returns":{"_0":"True if current batch is closed and awaiting settlement"}},"isBatchSettled()":{"returns":{"_0":"True if current batch is settled and ready for claims"}},"isHardHurdleRate()":{"returns":{"_0":"True if the current hurdle rate is a hard hurdle rate, false otherwise"}},"lastFeesChargedManagement()":{"returns":{"_0":"Timestamp of last management fee charge for accrual calculations"}},"lastFeesChargedPerformance()":{"returns":{"_0":"Timestamp of last performance fee charge for watermark tracking"}},"managementFee()":{"returns":{"_0":"Management fee rate in basis points (1% = 100)"}},"netSharePrice()":{"details":"Returns net share price after fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.","returns":{"_0":"Share price per stkToken in underlying asset terms (scaled to token decimals)"}},"nextManagementFeeTimestamp()":{"returns":{"_0":"Projected timestamp for next management fee evaluation"}},"nextPerformanceFeeTimestamp()":{"returns":{"_0":"Projected timestamp for next performance fee evaluation"}},"performanceFee()":{"returns":{"_0":"Performance fee rate in basis points (1% = 100)"}},"registry()":{"returns":{"_0":"Address of the kRegistry contract managing protocol-wide settings"}},"sharePrice()":{"details":"Returns gross share price before fee deductions, reflecting total vault performance. Used for settlement calculations and performance tracking.","returns":{"_0":"Share price per stkToken in underlying asset terms (scaled to token decimals)"}},"sharePriceWatermark()":{"details":"The watermark tracks the highest share price achieved, ensuring performance fees are only charged on new highs and preventing double-charging on recovered losses. Reset occurs when new high watermarks are achieved, establishing a new baseline for future performance fee calculations.","returns":{"_0":"Current high watermark share price in underlying asset terms"}},"totalAssets()":{"returns":{"_0":"Total asset value managed by the vault in underlying asset terms"}},"totalNetAssets()":{"details":"Provides user-facing asset value after management and performance fee deductions. Used for accurate user balance calculations and net yield reporting.","returns":{"_0":"Net asset value available to users after fee deductions"}},"underlyingAsset()":{"returns":{"_0":"Address of the base asset (USDC, WBTC, etc.) managed by this vault"}}},"version":1},"userdoc":{"kind":"user","methods":{"asset()":{"notice":"Returns the vault's share token (stkToken) address for ERC20 operations"},"computeLastBatchFees()":{"notice":"Calculates accumulated fees for the current period including management and performance components"},"contractName()":{"notice":"Returns the human-readable name identifier for this contract type"},"contractVersion()":{"notice":"Returns the version identifier for this contract implementation"},"convertToAssets(uint256)":{"notice":"Converts a given amount of assets to shares"},"convertToAssetsWithTotals(uint256,uint256)":{"notice":"Converts a given amount of shares to assets with a specified total assets"},"convertToShares(uint256)":{"notice":"Converts a given amount of shares to assets"},"convertToSharesWithTotals(uint256,uint256)":{"notice":"Converts a given amount of assets to shares with a specified total assets"},"getBatchId()":{"notice":"Returns the current active batch identifier"},"getBatchIdInfo(bytes32)":{"notice":"Returns comprehensive information about a specific batch"},"getBatchReceiver(bytes32)":{"notice":"Returns the batch receiver address for a specific batch ID"},"getCurrentBatchInfo()":{"notice":"Returns comprehensive information about the current batch"},"getSafeBatchId()":{"notice":"Returns current batch ID with safety validation"},"getSafeBatchReceiver(bytes32)":{"notice":"Returns batch receiver address with validation, creating if necessary"},"getStakeRequest(bytes32)":{"notice":"Gets the details of a specific stake request"},"getTotalPendingStake()":{"notice":"Returns the total pending stake amount"},"getUnstakeRequest(bytes32)":{"notice":"Gets the details of a specific unstake request"},"getUserRequests(address)":{"notice":"Gets all request IDs associated with a user"},"hurdleRate()":{"notice":"Returns the hurdle rate threshold for performance fee calculations"},"isBatchClosed()":{"notice":"Checks if the current batch is closed to new requests"},"isBatchSettled()":{"notice":"Checks if the current batch has been settled with finalized prices"},"isHardHurdleRate()":{"notice":"Returns whether the current hurdle rate is a hard hurdle rate"},"lastFeesChargedManagement()":{"notice":"Returns the timestamp when management fees were last processed"},"lastFeesChargedPerformance()":{"notice":"Returns the timestamp when performance fees were last processed"},"managementFee()":{"notice":"Returns the current management fee rate charged on assets under management"},"netSharePrice()":{"notice":"Calculates current share price including all accrued yields"},"nextManagementFeeTimestamp()":{"notice":"Calculates the next timestamp when management fees can be charged"},"nextPerformanceFeeTimestamp()":{"notice":"Calculates the next timestamp when performance fees can be charged"},"performanceFee()":{"notice":"Returns the current performance fee rate charged on excess returns"},"registry()":{"notice":"Returns the protocol registry address for configuration and role management"},"sharePrice()":{"notice":"Calculates current share price including all accrued yields"},"sharePriceWatermark()":{"notice":"Returns the high watermark used for performance fee calculations"},"totalAssets()":{"notice":"Returns total assets under management including pending fees"},"totalNetAssets()":{"notice":"Returns net assets after deducting accumulated fees"},"underlyingAsset()":{"notice":"Returns the underlying asset address that this vault generates yield on"}},"version":1}},"settings":{"remappings":["forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/","forge-std/=dependencies/forge-std-1.9.7/src/","kam/src/=src/","kam/test/=test/","openzeppelin/=src/vendor/openzeppelin/","solady/=src/vendor/solady/","uniswap/=src/vendor/uniswap/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/modules/IVaultReader.sol":"IVaultReader"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IVersioned.sol":{"keccak256":"0x23e7a218ecbf42e18656d069ee25302c74c5027d1dcfa4e1b9c54501d76a72f5","urls":["bzz-raw://2e2643eaf8cc8f8bc04dd90c6cbf5c1429de314dc85e93c254b1deae782af6eb","dweb:/ipfs/Qmb4s6G5PNFLy6iANEqHvanKZ3Tu1ahfW5V9ppWCxKTiDD"],"license":"MIT"},"src/interfaces/modules/IVaultReader.sol":{"keccak256":"0xf074699a11424105c3203c5d998fcb1379ef0241cdb9254f130cac2fae6fb539","urls":["bzz-raw://34380049ab5d23166f819036e72b8ad4142efc88a02914e00665902b9ec0d040","dweb:/ipfs/QmUHqFJfUUrj2JFyY1y7VwhgasnaNUVPWmZV3LZaMaVAeq"],"license":"UNLICENSED"},"src/kStakingVault/types/BaseVaultTypes.sol":{"keccak256":"0xa6dfda9ab80c6bca9613c989fb5863c81062f8378dc22c0433ca3464ba26d4b1","urls":["bzz-raw://41dd89e20036e001eb0388e89c94e1e6c71df8f9b6155a236e0886f788e7f3ca","dweb:/ipfs/QmRkAwRBoB9yHLAdvNAy5geVu5tXDWzFKfmf5eDDECrf4T"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/modules/IVaultReader.sol","id":52706,"exportedSymbols":{"BaseVaultTypes":[63028],"IVaultReader":[52705],"IVersioned":[51034]},"nodeType":"SourceUnit","src":"39:11642:58","nodes":[{"id":52454,"nodeType":"PragmaDirective","src":"39:23:58","nodes":[],"literals":["solidity","^","0.8",".4"]},{"id":52456,"nodeType":"ImportDirective","src":"64:63:58","nodes":[],"absolutePath":"src/interfaces/IVersioned.sol","file":"kam/src/interfaces/IVersioned.sol","nameLocation":"-1:-1:-1","scope":52706,"sourceUnit":51035,"symbolAliases":[{"foreign":{"id":52455,"name":"IVersioned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51034,"src":"73:10:58","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":52458,"nodeType":"ImportDirective","src":"128:80:58","nodes":[],"absolutePath":"src/kStakingVault/types/BaseVaultTypes.sol","file":"kam/src/kStakingVault/types/BaseVaultTypes.sol","nameLocation":"-1:-1:-1","scope":52706,"sourceUnit":63029,"symbolAliases":[{"foreign":{"id":52457,"name":"BaseVaultTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63028,"src":"137:14:58","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":52705,"nodeType":"ContractDefinition","src":"1307:10373:58","nodes":[{"id":52467,"nodeType":"FunctionDefinition","src":"1524:52:58","nodes":[],"documentation":{"id":52462,"nodeType":"StructuredDocumentation","src":"1350:169:58","text":"@notice Returns the protocol registry address for configuration and role management\n @return Address of the kRegistry contract managing protocol-wide settings"},"functionSelector":"7b103999","implemented":false,"kind":"function","modifiers":[],"name":"registry","nameLocation":"1533:8:58","parameters":{"id":52463,"nodeType":"ParameterList","parameters":[],"src":"1541:2:58"},"returnParameters":{"id":52466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52467,"src":"1567:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52464,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52473,"nodeType":"FunctionDefinition","src":"1753:49:58","nodes":[],"documentation":{"id":52468,"nodeType":"StructuredDocumentation","src":"1582:166:58","text":"@notice Returns the vault's share token (stkToken) address for ERC20 operations\n @return Address of this vault's stkToken contract representing user shares"},"functionSelector":"38d52e0f","implemented":false,"kind":"function","modifiers":[],"name":"asset","nameLocation":"1762:5:58","parameters":{"id":52469,"nodeType":"ParameterList","parameters":[],"src":"1767:2:58"},"returnParameters":{"id":52472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52473,"src":"1793:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52470,"name":"address","nodeType":"ElementaryTypeName","src":"1793:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1792:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52479,"nodeType":"FunctionDefinition","src":"1979:59:58","nodes":[],"documentation":{"id":52474,"nodeType":"StructuredDocumentation","src":"1808:166:58","text":"@notice Returns the underlying asset address that this vault generates yield on\n @return Address of the base asset (USDC, WBTC, etc.) managed by this vault"},"functionSelector":"7158da7c","implemented":false,"kind":"function","modifiers":[],"name":"underlyingAsset","nameLocation":"1988:15:58","parameters":{"id":52475,"nodeType":"ParameterList","parameters":[],"src":"2003:2:58"},"returnParameters":{"id":52478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52479,"src":"2029:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52476,"name":"address","nodeType":"ElementaryTypeName","src":"2029:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2028:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52489,"nodeType":"FunctionDefinition","src":"2847:147:58","nodes":[],"documentation":{"id":52480,"nodeType":"StructuredDocumentation","src":"2044:798:58","text":"@notice Calculates accumulated fees for the current period including management and performance components\n @dev Computes real-time fee accruals based on time elapsed and vault performance since last fee charge.\n Management fees accrue continuously based on assets under management and time passed. Performance fees\n are calculated on share price appreciation above watermarks and hurdle rates. This function provides\n accurate fee projections for settlement planning and user transparency without modifying state.\n @return managementFees Accrued management fees in underlying asset terms\n @return performanceFees Accrued performance fees in underlying asset terms\n @return totalFees Combined management and performance fees for total fee burden"},"functionSelector":"cf0597ed","implemented":false,"kind":"function","modifiers":[],"name":"computeLastBatchFees","nameLocation":"2856:20:58","parameters":{"id":52481,"nodeType":"ParameterList","parameters":[],"src":"2876:2:58"},"returnParameters":{"id":52488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52483,"mutability":"mutable","name":"managementFees","nameLocation":"2934:14:58","nodeType":"VariableDeclaration","scope":52489,"src":"2926:22:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52482,"name":"uint256","nodeType":"ElementaryTypeName","src":"2926:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":52485,"mutability":"mutable","name":"performanceFees","nameLocation":"2958:15:58","nodeType":"VariableDeclaration","scope":52489,"src":"2950:23:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52484,"name":"uint256","nodeType":"ElementaryTypeName","src":"2950:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":52487,"mutability":"mutable","name":"totalFees","nameLocation":"2983:9:58","nodeType":"VariableDeclaration","scope":52489,"src":"2975:17:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52486,"name":"uint256","nodeType":"ElementaryTypeName","src":"2975:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2925:68:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52495,"nodeType":"FunctionDefinition","src":"3160:69:58","nodes":[],"documentation":{"id":52490,"nodeType":"StructuredDocumentation","src":"3000:155:58","text":"@notice Returns the timestamp when management fees were last processed\n @return Timestamp of last management fee charge for accrual calculations"},"functionSelector":"8d5c009a","implemented":false,"kind":"function","modifiers":[],"name":"lastFeesChargedManagement","nameLocation":"3169:25:58","parameters":{"id":52491,"nodeType":"ParameterList","parameters":[],"src":"3194:2:58"},"returnParameters":{"id":52494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52495,"src":"3220:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52492,"name":"uint256","nodeType":"ElementaryTypeName","src":"3220:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3219:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52501,"nodeType":"FunctionDefinition","src":"3395:70:58","nodes":[],"documentation":{"id":52496,"nodeType":"StructuredDocumentation","src":"3235:155:58","text":"@notice Returns the timestamp when performance fees were last processed\n @return Timestamp of last performance fee charge for watermark tracking"},"functionSelector":"d0395ddb","implemented":false,"kind":"function","modifiers":[],"name":"lastFeesChargedPerformance","nameLocation":"3404:26:58","parameters":{"id":52497,"nodeType":"ParameterList","parameters":[],"src":"3430:2:58"},"returnParameters":{"id":52500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52501,"src":"3456:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52498,"name":"uint256","nodeType":"ElementaryTypeName","src":"3456:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3455:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52507,"nodeType":"FunctionDefinition","src":"3633:53:58","nodes":[],"documentation":{"id":52502,"nodeType":"StructuredDocumentation","src":"3471:157:58","text":"@notice Returns the hurdle rate threshold for performance fee calculations\n @return Hurdle rate in basis points that vault performance must exceed"},"functionSelector":"8297f431","implemented":false,"kind":"function","modifiers":[],"name":"hurdleRate","nameLocation":"3642:10:58","parameters":{"id":52503,"nodeType":"ParameterList","parameters":[],"src":"3652:2:58"},"returnParameters":{"id":52506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52507,"src":"3678:6:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":52504,"name":"uint16","nodeType":"ElementaryTypeName","src":"3678:6:58","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3677:8:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52513,"nodeType":"FunctionDefinition","src":"3857:57:58","nodes":[],"documentation":{"id":52508,"nodeType":"StructuredDocumentation","src":"3692:160:58","text":"@notice Returns whether the current hurdle rate is a hard hurdle rate\n @return True if the current hurdle rate is a hard hurdle rate, false otherwise"},"functionSelector":"07fee228","implemented":false,"kind":"function","modifiers":[],"name":"isHardHurdleRate","nameLocation":"3866:16:58","parameters":{"id":52509,"nodeType":"ParameterList","parameters":[],"src":"3882:2:58"},"returnParameters":{"id":52512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52513,"src":"3908:4:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52510,"name":"bool","nodeType":"ElementaryTypeName","src":"3908:4:58","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3907:6:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52519,"nodeType":"FunctionDefinition","src":"4067:57:58","nodes":[],"documentation":{"id":52514,"nodeType":"StructuredDocumentation","src":"3920:142:58","text":"@notice Returns the current performance fee rate charged on excess returns\n @return Performance fee rate in basis points (1% = 100)"},"functionSelector":"87788782","implemented":false,"kind":"function","modifiers":[],"name":"performanceFee","nameLocation":"4076:14:58","parameters":{"id":52515,"nodeType":"ParameterList","parameters":[],"src":"4090:2:58"},"returnParameters":{"id":52518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52519,"src":"4116:6:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":52516,"name":"uint16","nodeType":"ElementaryTypeName","src":"4116:6:58","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4115:8:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52525,"nodeType":"FunctionDefinition","src":"4285:71:58","nodes":[],"documentation":{"id":52520,"nodeType":"StructuredDocumentation","src":"4130:150:58","text":"@notice Calculates the next timestamp when performance fees can be charged\n @return Projected timestamp for next performance fee evaluation"},"functionSelector":"77f00194","implemented":false,"kind":"function","modifiers":[],"name":"nextPerformanceFeeTimestamp","nameLocation":"4294:27:58","parameters":{"id":52521,"nodeType":"ParameterList","parameters":[],"src":"4321:2:58"},"returnParameters":{"id":52524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52525,"src":"4347:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52522,"name":"uint256","nodeType":"ElementaryTypeName","src":"4347:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4346:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52531,"nodeType":"FunctionDefinition","src":"4515:70:58","nodes":[],"documentation":{"id":52526,"nodeType":"StructuredDocumentation","src":"4362:148:58","text":"@notice Calculates the next timestamp when management fees can be charged\n @return Projected timestamp for next management fee evaluation"},"functionSelector":"52b09688","implemented":false,"kind":"function","modifiers":[],"name":"nextManagementFeeTimestamp","nameLocation":"4524:26:58","parameters":{"id":52527,"nodeType":"ParameterList","parameters":[],"src":"4550:2:58"},"returnParameters":{"id":52530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52531,"src":"4576:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52528,"name":"uint256","nodeType":"ElementaryTypeName","src":"4576:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4575:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52537,"nodeType":"FunctionDefinition","src":"4745:56:58","nodes":[],"documentation":{"id":52532,"nodeType":"StructuredDocumentation","src":"4591:149:58","text":"@notice Returns the current management fee rate charged on assets under management\n @return Management fee rate in basis points (1% = 100)"},"functionSelector":"a6f7f5d6","implemented":false,"kind":"function","modifiers":[],"name":"managementFee","nameLocation":"4754:13:58","parameters":{"id":52533,"nodeType":"ParameterList","parameters":[],"src":"4767:2:58"},"returnParameters":{"id":52536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52537,"src":"4793:6:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":52534,"name":"uint16","nodeType":"ElementaryTypeName","src":"4793:6:58","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4792:8:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52543,"nodeType":"FunctionDefinition","src":"5278:63:58","nodes":[],"documentation":{"id":52538,"nodeType":"StructuredDocumentation","src":"4807:466:58","text":"@notice Returns the high watermark used for performance fee calculations\n @dev The watermark tracks the highest share price achieved, ensuring performance fees are only\n charged on new highs and preventing double-charging on recovered losses. Reset occurs when new\n high watermarks are achieved, establishing a new baseline for future performance fee calculations.\n @return Current high watermark share price in underlying asset terms"},"functionSelector":"34a44bd5","implemented":false,"kind":"function","modifiers":[],"name":"sharePriceWatermark","nameLocation":"5287:19:58","parameters":{"id":52539,"nodeType":"ParameterList","parameters":[],"src":"5306:2:58"},"returnParameters":{"id":52542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52543,"src":"5332:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52540,"name":"uint256","nodeType":"ElementaryTypeName","src":"5332:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5331:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52549,"nodeType":"FunctionDefinition","src":"5489:54:58","nodes":[],"documentation":{"id":52544,"nodeType":"StructuredDocumentation","src":"5347:137:58","text":"@notice Checks if the current batch is closed to new requests\n @return True if current batch is closed and awaiting settlement"},"functionSelector":"78e36ac9","implemented":false,"kind":"function","modifiers":[],"name":"isBatchClosed","nameLocation":"5498:13:58","parameters":{"id":52545,"nodeType":"ParameterList","parameters":[],"src":"5511:2:58"},"returnParameters":{"id":52548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52549,"src":"5537:4:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52546,"name":"bool","nodeType":"ElementaryTypeName","src":"5537:4:58","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5536:6:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52555,"nodeType":"FunctionDefinition","src":"5702:55:58","nodes":[],"documentation":{"id":52550,"nodeType":"StructuredDocumentation","src":"5549:148:58","text":"@notice Checks if the current batch has been settled with finalized prices\n @return True if current batch is settled and ready for claims"},"functionSelector":"b5e9f485","implemented":false,"kind":"function","modifiers":[],"name":"isBatchSettled","nameLocation":"5711:14:58","parameters":{"id":52551,"nodeType":"ParameterList","parameters":[],"src":"5725:2:58"},"returnParameters":{"id":52554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52555,"src":"5751:4:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52552,"name":"bool","nodeType":"ElementaryTypeName","src":"5751:4:58","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5750:6:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52567,"nodeType":"FunctionDefinition","src":"6110:149:58","nodes":[],"documentation":{"id":52556,"nodeType":"StructuredDocumentation","src":"5763:342:58","text":"@notice Returns comprehensive information about the current batch\n @return batchId Current batch identifier\n @return batchReceiver Address of batch receiver contract (may be zero if not created)\n @return isClosed Whether the batch is closed to new requests\n @return isSettled Whether the batch has been settled"},"functionSelector":"72674eb6","implemented":false,"kind":"function","modifiers":[],"name":"getCurrentBatchInfo","nameLocation":"6119:19:58","parameters":{"id":52557,"nodeType":"ParameterList","parameters":[],"src":"6138:2:58"},"returnParameters":{"id":52566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52559,"mutability":"mutable","name":"batchId","nameLocation":"6196:7:58","nodeType":"VariableDeclaration","scope":52567,"src":"6188:15:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52558,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6188:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":52561,"mutability":"mutable","name":"batchReceiver","nameLocation":"6213:13:58","nodeType":"VariableDeclaration","scope":52567,"src":"6205:21:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52560,"name":"address","nodeType":"ElementaryTypeName","src":"6205:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":52563,"mutability":"mutable","name":"isClosed","nameLocation":"6233:8:58","nodeType":"VariableDeclaration","scope":52567,"src":"6228:13:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52562,"name":"bool","nodeType":"ElementaryTypeName","src":"6228:4:58","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":52565,"mutability":"mutable","name":"isSettled","nameLocation":"6248:9:58","nodeType":"VariableDeclaration","scope":52567,"src":"6243:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52564,"name":"bool","nodeType":"ElementaryTypeName","src":"6243:4:58","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6187:71:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52583,"nodeType":"FunctionDefinition","src":"6729:185:58","nodes":[],"documentation":{"id":52568,"nodeType":"StructuredDocumentation","src":"6265:459:58","text":"@notice Returns comprehensive information about a specific batch\n @param batchId The batch identifier to query\n @return batchReceiver Address of batch receiver contract (may be zero if not deployed)\n @return isClosed Whether the batch is closed to new requests\n @return isSettled Whether the batch has been settled\n @return sharePrice Share price of settlement\n @return netSharePrice Net share price of settlement"},"functionSelector":"aa2e3343","implemented":false,"kind":"function","modifiers":[],"name":"getBatchIdInfo","nameLocation":"6738:14:58","parameters":{"id":52571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52570,"mutability":"mutable","name":"batchId","nameLocation":"6761:7:58","nodeType":"VariableDeclaration","scope":52583,"src":"6753:15:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6753:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6752:17:58"},"returnParameters":{"id":52582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52573,"mutability":"mutable","name":"batchReceiver","nameLocation":"6825:13:58","nodeType":"VariableDeclaration","scope":52583,"src":"6817:21:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52572,"name":"address","nodeType":"ElementaryTypeName","src":"6817:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":52575,"mutability":"mutable","name":"isClosed","nameLocation":"6845:8:58","nodeType":"VariableDeclaration","scope":52583,"src":"6840:13:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52574,"name":"bool","nodeType":"ElementaryTypeName","src":"6840:4:58","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":52577,"mutability":"mutable","name":"isSettled","nameLocation":"6860:9:58","nodeType":"VariableDeclaration","scope":52583,"src":"6855:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52576,"name":"bool","nodeType":"ElementaryTypeName","src":"6855:4:58","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":52579,"mutability":"mutable","name":"sharePrice","nameLocation":"6879:10:58","nodeType":"VariableDeclaration","scope":52583,"src":"6871:18:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52578,"name":"uint256","nodeType":"ElementaryTypeName","src":"6871:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":52581,"mutability":"mutable","name":"netSharePrice","nameLocation":"6899:13:58","nodeType":"VariableDeclaration","scope":52583,"src":"6891:21:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52580,"name":"uint256","nodeType":"ElementaryTypeName","src":"6891:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6816:97:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52591,"nodeType":"FunctionDefinition","src":"7124:75:58","nodes":[],"documentation":{"id":52584,"nodeType":"StructuredDocumentation","src":"6920:199:58","text":"@notice Returns the batch receiver address for a specific batch ID\n @param batchId The batch identifier to query\n @return Address of the batch receiver (may be zero if not deployed)"},"functionSelector":"befe3170","implemented":false,"kind":"function","modifiers":[],"name":"getBatchReceiver","nameLocation":"7133:16:58","parameters":{"id":52587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52586,"mutability":"mutable","name":"batchId","nameLocation":"7158:7:58","nodeType":"VariableDeclaration","scope":52591,"src":"7150:15:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52585,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7150:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7149:17:58"},"returnParameters":{"id":52590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52591,"src":"7190:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52588,"name":"address","nodeType":"ElementaryTypeName","src":"7190:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7189:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52599,"nodeType":"FunctionDefinition","src":"7412:79:58","nodes":[],"documentation":{"id":52592,"nodeType":"StructuredDocumentation","src":"7205:202:58","text":"@notice Returns batch receiver address with validation, creating if necessary\n @param batchId The batch identifier to query\n @return Address of the batch receiver (guaranteed non-zero)"},"functionSelector":"5e3d5f7f","implemented":false,"kind":"function","modifiers":[],"name":"getSafeBatchReceiver","nameLocation":"7421:20:58","parameters":{"id":52595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52594,"mutability":"mutable","name":"batchId","nameLocation":"7450:7:58","nodeType":"VariableDeclaration","scope":52599,"src":"7442:15:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7442:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7441:17:58"},"returnParameters":{"id":52598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52599,"src":"7482:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52596,"name":"address","nodeType":"ElementaryTypeName","src":"7482:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7481:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52605,"nodeType":"FunctionDefinition","src":"7829:57:58","nodes":[],"documentation":{"id":52600,"nodeType":"StructuredDocumentation","src":"7497:327:58","text":"@notice Calculates current share price including all accrued yields\n @dev Returns net share price after fee deductions, reflecting total vault performance.\n Used for settlement calculations and performance tracking.\n @return Share price per stkToken in underlying asset terms (scaled to token decimals)"},"functionSelector":"b1791c0d","implemented":false,"kind":"function","modifiers":[],"name":"netSharePrice","nameLocation":"7838:13:58","parameters":{"id":52601,"nodeType":"ParameterList","parameters":[],"src":"7851:2:58"},"returnParameters":{"id":52604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52603,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52605,"src":"7877:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52602,"name":"uint256","nodeType":"ElementaryTypeName","src":"7877:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7876:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52611,"nodeType":"FunctionDefinition","src":"8227:54:58","nodes":[],"documentation":{"id":52606,"nodeType":"StructuredDocumentation","src":"7892:330:58","text":"@notice Calculates current share price including all accrued yields\n @dev Returns gross share price before fee deductions, reflecting total vault performance.\n Used for settlement calculations and performance tracking.\n @return Share price per stkToken in underlying asset terms (scaled to token decimals)"},"functionSelector":"87269729","implemented":false,"kind":"function","modifiers":[],"name":"sharePrice","nameLocation":"8236:10:58","parameters":{"id":52607,"nodeType":"ParameterList","parameters":[],"src":"8246:2:58"},"returnParameters":{"id":52610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52611,"src":"8272:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52608,"name":"uint256","nodeType":"ElementaryTypeName","src":"8272:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8271:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52617,"nodeType":"FunctionDefinition","src":"8445:55:58","nodes":[],"documentation":{"id":52612,"nodeType":"StructuredDocumentation","src":"8287:153:58","text":"@notice Returns total assets under management including pending fees\n @return Total asset value managed by the vault in underlying asset terms"},"functionSelector":"01e1d114","implemented":false,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"8454:11:58","parameters":{"id":52613,"nodeType":"ParameterList","parameters":[],"src":"8465:2:58"},"returnParameters":{"id":52616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52617,"src":"8491:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52614,"name":"uint256","nodeType":"ElementaryTypeName","src":"8491:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8490:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52623,"nodeType":"FunctionDefinition","src":"8818:58:58","nodes":[],"documentation":{"id":52618,"nodeType":"StructuredDocumentation","src":"8506:307:58","text":"@notice Returns net assets after deducting accumulated fees\n @dev Provides user-facing asset value after management and performance fee deductions.\n Used for accurate user balance calculations and net yield reporting.\n @return Net asset value available to users after fee deductions"},"functionSelector":"890a8c4f","implemented":false,"kind":"function","modifiers":[],"name":"totalNetAssets","nameLocation":"8827:14:58","parameters":{"id":52619,"nodeType":"ParameterList","parameters":[],"src":"8841:2:58"},"returnParameters":{"id":52622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52623,"src":"8867:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52620,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8866:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52629,"nodeType":"FunctionDefinition","src":"8992:54:58","nodes":[],"documentation":{"id":52624,"nodeType":"StructuredDocumentation","src":"8882:105:58","text":"@notice Returns the current active batch identifier\n @return Current batch ID for new requests"},"functionSelector":"7b27b9ee","implemented":false,"kind":"function","modifiers":[],"name":"getBatchId","nameLocation":"9001:10:58","parameters":{"id":52625,"nodeType":"ParameterList","parameters":[],"src":"9011:2:58"},"returnParameters":{"id":52628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52629,"src":"9037:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9037:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9036:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52635,"nodeType":"FunctionDefinition","src":"9190:58:58","nodes":[],"documentation":{"id":52630,"nodeType":"StructuredDocumentation","src":"9052:133:58","text":"@notice Returns current batch ID with safety validation\n @return Current batch ID (guaranteed to be valid and initialized)"},"functionSelector":"5308394f","implemented":false,"kind":"function","modifiers":[],"name":"getSafeBatchId","nameLocation":"9199:14:58","parameters":{"id":52631,"nodeType":"ParameterList","parameters":[],"src":"9213:2:58"},"returnParameters":{"id":52634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52635,"src":"9239:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52632,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9239:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9238:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52643,"nodeType":"FunctionDefinition","src":"9416:73:58","nodes":[],"documentation":{"id":52636,"nodeType":"StructuredDocumentation","src":"9254:157:58","text":"@notice Converts a given amount of shares to assets\n @param shares The amount of shares to convert\n @return The equivalent amount of assets"},"functionSelector":"c6e6f592","implemented":false,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"9425:15:58","parameters":{"id":52639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52638,"mutability":"mutable","name":"shares","nameLocation":"9449:6:58","nodeType":"VariableDeclaration","scope":52643,"src":"9441:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52637,"name":"uint256","nodeType":"ElementaryTypeName","src":"9441:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9440:16:58"},"returnParameters":{"id":52642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52643,"src":"9480:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52640,"name":"uint256","nodeType":"ElementaryTypeName","src":"9480:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9479:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52651,"nodeType":"FunctionDefinition","src":"9657:73:58","nodes":[],"documentation":{"id":52644,"nodeType":"StructuredDocumentation","src":"9495:157:58","text":"@notice Converts a given amount of assets to shares\n @param assets The amount of assets to convert\n @return The equivalent amount of shares"},"functionSelector":"07a2d13a","implemented":false,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"9666:15:58","parameters":{"id":52647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52646,"mutability":"mutable","name":"assets","nameLocation":"9690:6:58","nodeType":"VariableDeclaration","scope":52651,"src":"9682:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52645,"name":"uint256","nodeType":"ElementaryTypeName","src":"9682:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9681:16:58"},"returnParameters":{"id":52650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52651,"src":"9721:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52648,"name":"uint256","nodeType":"ElementaryTypeName","src":"9721:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9720:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52661,"nodeType":"FunctionDefinition","src":"9997:104:58","nodes":[],"documentation":{"id":52652,"nodeType":"StructuredDocumentation","src":"9736:256:58","text":"@notice Converts a given amount of shares to assets with a specified total assets\n @param shares The amount of shares to convert\n @param totalAssets The total assets available for conversion\n @return The equivalent amount of assets"},"functionSelector":"9ff217fe","implemented":false,"kind":"function","modifiers":[],"name":"convertToAssetsWithTotals","nameLocation":"10006:25:58","parameters":{"id":52657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52654,"mutability":"mutable","name":"shares","nameLocation":"10040:6:58","nodeType":"VariableDeclaration","scope":52661,"src":"10032:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52653,"name":"uint256","nodeType":"ElementaryTypeName","src":"10032:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":52656,"mutability":"mutable","name":"totalAssets","nameLocation":"10056:11:58","nodeType":"VariableDeclaration","scope":52661,"src":"10048:19:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52655,"name":"uint256","nodeType":"ElementaryTypeName","src":"10048:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10031:37:58"},"returnParameters":{"id":52660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52661,"src":"10092:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52658,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10091:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52671,"nodeType":"FunctionDefinition","src":"10368:104:58","nodes":[],"documentation":{"id":52662,"nodeType":"StructuredDocumentation","src":"10107:256:58","text":"@notice Converts a given amount of assets to shares with a specified total assets\n @param assets The amount of assets to convert\n @param totalAssets The total assets available for conversion\n @return The equivalent amount of shares"},"functionSelector":"ef3066d4","implemented":false,"kind":"function","modifiers":[],"name":"convertToSharesWithTotals","nameLocation":"10377:25:58","parameters":{"id":52667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52664,"mutability":"mutable","name":"assets","nameLocation":"10411:6:58","nodeType":"VariableDeclaration","scope":52671,"src":"10403:14:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52663,"name":"uint256","nodeType":"ElementaryTypeName","src":"10403:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":52666,"mutability":"mutable","name":"totalAssets","nameLocation":"10427:11:58","nodeType":"VariableDeclaration","scope":52671,"src":"10419:19:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52665,"name":"uint256","nodeType":"ElementaryTypeName","src":"10419:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10402:37:58"},"returnParameters":{"id":52670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52671,"src":"10463:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52668,"name":"uint256","nodeType":"ElementaryTypeName","src":"10463:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10462:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52680,"nodeType":"FunctionDefinition","src":"10685:91:58","nodes":[],"documentation":{"id":52672,"nodeType":"StructuredDocumentation","src":"10478:202:58","text":"@notice Gets all request IDs associated with a user\n @param user The address to query requests for\n @return requestIds An array of all request IDs (both stake and unstake) for the user"},"functionSelector":"b337cf74","implemented":false,"kind":"function","modifiers":[],"name":"getUserRequests","nameLocation":"10694:15:58","parameters":{"id":52675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52674,"mutability":"mutable","name":"user","nameLocation":"10718:4:58","nodeType":"VariableDeclaration","scope":52680,"src":"10710:12:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52673,"name":"address","nodeType":"ElementaryTypeName","src":"10710:7:58","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10709:14:58"},"returnParameters":{"id":52679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52678,"mutability":"mutable","name":"requestIds","nameLocation":"10764:10:58","nodeType":"VariableDeclaration","scope":52680,"src":"10747:27:58","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":52676,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10747:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":52677,"nodeType":"ArrayTypeName","src":"10747:9:58","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"10746:29:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52689,"nodeType":"FunctionDefinition","src":"10996:140:58","nodes":[],"documentation":{"id":52681,"nodeType":"StructuredDocumentation","src":"10782:209:58","text":"@notice Gets the details of a specific stake request\n @param requestId The unique identifier of the stake request\n @return stakeRequest The stake request struct containing all request details"},"functionSelector":"ac219343","implemented":false,"kind":"function","modifiers":[],"name":"getStakeRequest","nameLocation":"11005:15:58","parameters":{"id":52684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52683,"mutability":"mutable","name":"requestId","nameLocation":"11029:9:58","nodeType":"VariableDeclaration","scope":52689,"src":"11021:17:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52682,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11021:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11020:19:58"},"returnParameters":{"id":52688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52687,"mutability":"mutable","name":"stakeRequest","nameLocation":"11122:12:58","nodeType":"VariableDeclaration","scope":52689,"src":"11087:47:58","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeRequest_$62980_memory_ptr","typeString":"struct BaseVaultTypes.StakeRequest"},"typeName":{"id":52686,"nodeType":"UserDefinedTypeName","pathNode":{"id":52685,"name":"BaseVaultTypes.StakeRequest","nameLocations":["11087:14:58","11102:12:58"],"nodeType":"IdentifierPath","referencedDeclaration":62980,"src":"11087:27:58"},"referencedDeclaration":62980,"src":"11087:27:58","typeDescriptions":{"typeIdentifier":"t_struct$_StakeRequest_$62980_storage_ptr","typeString":"struct BaseVaultTypes.StakeRequest"}},"visibility":"internal"}],"src":"11086:49:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52698,"nodeType":"FunctionDefinition","src":"11364:146:58","nodes":[],"documentation":{"id":52690,"nodeType":"StructuredDocumentation","src":"11142:217:58","text":"@notice Gets the details of a specific unstake request\n @param requestId The unique identifier of the unstake request\n @return unstakeRequest The unstake request struct containing all request details"},"functionSelector":"a625e721","implemented":false,"kind":"function","modifiers":[],"name":"getUnstakeRequest","nameLocation":"11373:17:58","parameters":{"id":52693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52692,"mutability":"mutable","name":"requestId","nameLocation":"11399:9:58","nodeType":"VariableDeclaration","scope":52698,"src":"11391:17:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52691,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11391:7:58","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11390:19:58"},"returnParameters":{"id":52697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52696,"mutability":"mutable","name":"unstakeRequest","nameLocation":"11494:14:58","nodeType":"VariableDeclaration","scope":52698,"src":"11457:51:58","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UnstakeRequest_$63001_memory_ptr","typeString":"struct BaseVaultTypes.UnstakeRequest"},"typeName":{"id":52695,"nodeType":"UserDefinedTypeName","pathNode":{"id":52694,"name":"BaseVaultTypes.UnstakeRequest","nameLocations":["11457:14:58","11472:14:58"],"nodeType":"IdentifierPath","referencedDeclaration":63001,"src":"11457:29:58"},"referencedDeclaration":63001,"src":"11457:29:58","typeDescriptions":{"typeIdentifier":"t_struct$_UnstakeRequest_$63001_storage_ptr","typeString":"struct BaseVaultTypes.UnstakeRequest"}},"visibility":"internal"}],"src":"11456:53:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":52704,"nodeType":"FunctionDefinition","src":"11614:64:58","nodes":[],"documentation":{"id":52699,"nodeType":"StructuredDocumentation","src":"11516:93:58","text":"@notice Returns the total pending stake amount\n @return Total pending stake amount"},"functionSelector":"4389a279","implemented":false,"kind":"function","modifiers":[],"name":"getTotalPendingStake","nameLocation":"11623:20:58","parameters":{"id":52700,"nodeType":"ParameterList","parameters":[],"src":"11643:2:58"},"returnParameters":{"id":52703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":52704,"src":"11669:7:58","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52701,"name":"uint256","nodeType":"ElementaryTypeName","src":"11669:7:58","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11668:9:58"},"scope":52705,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":52460,"name":"IVersioned","nameLocations":["1333:10:58"],"nodeType":"IdentifierPath","referencedDeclaration":51034,"src":"1333:10:58"},"id":52461,"nodeType":"InheritanceSpecifier","src":"1333:10:58"}],"canonicalName":"IVaultReader","contractDependencies":[],"contractKind":"interface","documentation":{"id":52459,"nodeType":"StructuredDocumentation","src":"210:1097:58","text":"@title IVaultReader\n @notice Read-only interface for querying vault state, calculations, and metrics without modifying contract state\n @dev This interface provides comprehensive access to vault information for external integrations, front-ends, and\n analytics without gas costs or state modifications. The interface covers several key areas: (1) Configuration:\n Registry references, underlying assets, and fee parameters, (2) Financial Metrics: Share prices, total assets,\n and fee calculations for accurate vault valuation, (3) Batch Information: Current and historical batch states\n for settlement tracking, (4) Fee Calculations: Real-time fee accruals and next fee timestamps, (5) Safety Functions:\n Validated batch ID and receiver retrieval preventing errors. This read-only approach enables efficient monitoring\n and integration while maintaining clear separation from state-modifying operations. All calculations reflect current\n vault state including pending fees and accrued yields, providing accurate real-time vault metrics for users and\n integrations."},"fullyImplemented":false,"linearizedBaseContracts":[52705,51034],"name":"IVaultReader","nameLocation":"1317:12:58","scope":52706,"usedErrors":[],"usedEvents":[]}],"license":"UNLICENSED"},"id":58}