{"abi":[{"type":"function","name":"closeBatch","inputs":[{"name":"_batchId","type":"bytes32","internalType":"bytes32"},{"name":"_create","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createNewBatch","inputs":[],"outputs":[{"name":"batchId","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"settleBatch","inputs":[{"name":"_batchId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"closeBatch(bytes32,bool)":"bb507ab9","createNewBatch()":"1875e8f5","settleBatch(bytes32)":"eeb8f2b5"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_create\",\"type\":\"bool\"}],\"name\":\"closeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNewBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"settleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface defines the batch processing system that aggregates individual staking/unstaking requests for efficient settlement. The batch lifecycle consists of three distinct phases: (1) Open Phase: New requests can be added to the current batch, enabling users to join the settlement period, (2) Closed Phase: No new requests accepted, batch is prepared for settlement with final share price calculations, (3) Settled Phase: Assets distributed and share prices fixed, users can claim their rewards/redemptions. This system provides several key benefits: gas cost optimization through bulk processing, fair pricing through synchronized settlement, coordination with kAssetRouter for cross-vault yield distribution, and minimal proxy deployment for isolated asset distribution. The batch system is critical for maintaining protocol scalability while ensuring equitable treatment of all participants within each settlement period.\",\"kind\":\"dev\",\"methods\":{\"closeBatch(bytes32,bool)\":{\"details\":\"This function transitions a batch from open to closed state, finalizing the request set for settlement. Process: (1) Validates batch exists and is currently open to prevent double-closing, (2) Marks batch as closed preventing new stake/unstake requests from joining, (3) Optionally creates new batch for continued operations if _create flag is true, enabling seamless transitions. Once closed, the batch awaits settlement by kAssetRouter which will calculate final share prices and distribute yields. Only relayers can execute batch closure as part of the coordinated settlement schedule across all protocol vaults. The timing typically aligns with DN vault yield calculations to ensure accurate price discovery.\",\"params\":{\"_batchId\":\"The specific batch identifier to close (must be currently open)\",\"_create\":\"Whether to immediately create a new batch after closing for continued operations\"}},\"createNewBatch()\":{\"details\":\"This function initializes a fresh batch period for collecting staking and unstaking requests. Process: (1) Increments internal batch counter for unique identification, (2) Generates deterministic batch ID using chain-specific parameters (vault address, batch number, chainid, timestamp, asset) for collision resistance, (3) Initializes batch storage with open state enabling new request acceptance, (4) Updates vault's current batch tracking for request routing. Only relayers can call this function as part of the automated settlement schedule. The timing is typically coordinated with institutional settlement cycles to optimize capital efficiency across the protocol. Each batch remains open until explicitly closed by relayers or governance.\",\"returns\":{\"batchId\":\"Unique deterministic identifier for the newly created batch period\"}},\"settleBatch(bytes32)\":{\"details\":\"This function finalizes batch settlement by recording final asset values and enabling claims. Process: (1) Validates batch is closed and not already settled to prevent duplicate processing, (2) Snapshots both gross and net share prices at settlement time for accurate reward calculations, (3) Marks batch as settled enabling users to claim their staked shares or unstaked assets, (4) Completes the batch lifecycle allowing reward distribution through the claiming mechanism. Only kAssetRouter can settle batches as it coordinates yield calculations across DN vaults and manages cross-vault asset flows. Settlement triggers share price finalization based on vault performance during the batch period.\",\"params\":{\"_batchId\":\"The batch identifier to mark as settled (must be closed, not previously settled)\"}}},\"title\":\"IVaultBatch\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeBatch(bytes32,bool)\":{\"notice\":\"Closes a batch to prevent new requests and prepare for settlement processing\"},\"createNewBatch()\":{\"notice\":\"Creates a new batch to begin aggregating user requests for the next settlement period\"},\"settleBatch(bytes32)\":{\"notice\":\"Marks a batch as settled after yield distribution and enables user claiming\"}},\"notice\":\"Interface for batch lifecycle management enabling gas-efficient settlement of multiple user operations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IVaultBatch.sol\":\"IVaultBatch\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":kam/src/=src/\",\":kam/test/=test/\",\":openzeppelin/=src/vendor/openzeppelin/\",\":solady/=src/vendor/solady/\",\":uniswap/=src/vendor/uniswap/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IVaultBatch.sol\":{\"keccak256\":\"0x0a44fd2302ad59ec16ad67be0afcb63aaf96d105469512acd7161304cc1c85f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f330dd9284c50c75dea5b132a549fac4f3baf107cdaa4a21374af8435cbf45c9\",\"dweb:/ipfs/QmRBbusrsoEM7VYjtEKXphnzE6RFkFoLhU2iNRwTDZuXTp\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_batchId","type":"bytes32"},{"internalType":"bool","name":"_create","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"closeBatch"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"createNewBatch","outputs":[{"internalType":"bytes32","name":"batchId","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"_batchId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"settleBatch"}],"devdoc":{"kind":"dev","methods":{"closeBatch(bytes32,bool)":{"details":"This function transitions a batch from open to closed state, finalizing the request set for settlement. Process: (1) Validates batch exists and is currently open to prevent double-closing, (2) Marks batch as closed preventing new stake/unstake requests from joining, (3) Optionally creates new batch for continued operations if _create flag is true, enabling seamless transitions. Once closed, the batch awaits settlement by kAssetRouter which will calculate final share prices and distribute yields. Only relayers can execute batch closure as part of the coordinated settlement schedule across all protocol vaults. The timing typically aligns with DN vault yield calculations to ensure accurate price discovery.","params":{"_batchId":"The specific batch identifier to close (must be currently open)","_create":"Whether to immediately create a new batch after closing for continued operations"}},"createNewBatch()":{"details":"This function initializes a fresh batch period for collecting staking and unstaking requests. Process: (1) Increments internal batch counter for unique identification, (2) Generates deterministic batch ID using chain-specific parameters (vault address, batch number, chainid, timestamp, asset) for collision resistance, (3) Initializes batch storage with open state enabling new request acceptance, (4) Updates vault's current batch tracking for request routing. Only relayers can call this function as part of the automated settlement schedule. The timing is typically coordinated with institutional settlement cycles to optimize capital efficiency across the protocol. Each batch remains open until explicitly closed by relayers or governance.","returns":{"batchId":"Unique deterministic identifier for the newly created batch period"}},"settleBatch(bytes32)":{"details":"This function finalizes batch settlement by recording final asset values and enabling claims. Process: (1) Validates batch is closed and not already settled to prevent duplicate processing, (2) Snapshots both gross and net share prices at settlement time for accurate reward calculations, (3) Marks batch as settled enabling users to claim their staked shares or unstaked assets, (4) Completes the batch lifecycle allowing reward distribution through the claiming mechanism. Only kAssetRouter can settle batches as it coordinates yield calculations across DN vaults and manages cross-vault asset flows. Settlement triggers share price finalization based on vault performance during the batch period.","params":{"_batchId":"The batch identifier to mark as settled (must be closed, not previously settled)"}}},"version":1},"userdoc":{"kind":"user","methods":{"closeBatch(bytes32,bool)":{"notice":"Closes a batch to prevent new requests and prepare for settlement processing"},"createNewBatch()":{"notice":"Creates a new batch to begin aggregating user requests for the next settlement period"},"settleBatch(bytes32)":{"notice":"Marks a batch as settled after yield distribution and enables user claiming"}},"version":1}},"settings":{"remappings":["forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/","forge-std/=dependencies/forge-std-1.9.7/src/","kam/src/=src/","kam/test/=test/","openzeppelin/=src/vendor/openzeppelin/","solady/=src/vendor/solady/","uniswap/=src/vendor/uniswap/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IVaultBatch.sol":"IVaultBatch"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IVaultBatch.sol":{"keccak256":"0x0a44fd2302ad59ec16ad67be0afcb63aaf96d105469512acd7161304cc1c85f2","urls":["bzz-raw://f330dd9284c50c75dea5b132a549fac4f3baf107cdaa4a21374af8435cbf45c9","dweb:/ipfs/QmRBbusrsoEM7VYjtEKXphnzE6RFkFoLhU2iNRwTDZuXTp"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IVaultBatch.sol","id":50377,"exportedSymbols":{"IVaultBatch":[50376]},"nodeType":"SourceUnit","src":"32:4374:45","nodes":[{"id":50354,"nodeType":"PragmaDirective","src":"32:23:45","nodes":[],"literals":["solidity","^","0.8",".4"]},{"id":50376,"nodeType":"ContractDefinition","src":"1168:3237:45","nodes":[{"id":50361,"nodeType":"FunctionDefinition","src":"2204:61:45","nodes":[],"documentation":{"id":50356,"nodeType":"StructuredDocumentation","src":"1196:1003:45","text":"@notice Creates a new batch to begin aggregating user requests for the next settlement period\n @dev This function initializes a fresh batch period for collecting staking and unstaking requests. Process:\n (1) Increments internal batch counter for unique identification, (2) Generates deterministic batch ID using\n chain-specific parameters (vault address, batch number, chainid, timestamp, asset) for collision resistance,\n (3) Initializes batch storage with open state enabling new request acceptance, (4) Updates vault's current\n batch tracking for request routing. Only relayers can call this function as part of the automated settlement\n schedule. The timing is typically coordinated with institutional settlement cycles to optimize capital\n efficiency\n across the protocol. Each batch remains open until explicitly closed by relayers or governance.\n @return batchId Unique deterministic identifier for the newly created batch period"},"functionSelector":"1875e8f5","implemented":false,"kind":"function","modifiers":[],"name":"createNewBatch","nameLocation":"2213:14:45","parameters":{"id":50357,"nodeType":"ParameterList","parameters":[],"src":"2227:2:45"},"returnParameters":{"id":50360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50359,"mutability":"mutable","name":"batchId","nameLocation":"2256:7:45","nodeType":"VariableDeclaration","scope":50361,"src":"2248:15:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":50358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2248:7:45","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2247:17:45"},"scope":50376,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":50369,"nodeType":"FunctionDefinition","src":"3330:61:45","nodes":[],"documentation":{"id":50362,"nodeType":"StructuredDocumentation","src":"2271:1054:45","text":"@notice Closes a batch to prevent new requests and prepare for settlement processing\n @dev This function transitions a batch from open to closed state, finalizing the request set for settlement.\n Process: (1) Validates batch exists and is currently open to prevent double-closing, (2) Marks batch as closed\n preventing new stake/unstake requests from joining, (3) Optionally creates new batch for continued operations\n if _create flag is true, enabling seamless transitions. Once closed, the batch awaits settlement by kAssetRouter\n which will calculate final share prices and distribute yields. Only relayers can execute batch closure as part\n of the coordinated settlement schedule across all protocol vaults. The timing typically aligns with DN vault\n yield calculations to ensure accurate price discovery.\n @param _batchId The specific batch identifier to close (must be currently open)\n @param _create Whether to immediately create a new batch after closing for continued operations"},"functionSelector":"bb507ab9","implemented":false,"kind":"function","modifiers":[],"name":"closeBatch","nameLocation":"3339:10:45","parameters":{"id":50367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50364,"mutability":"mutable","name":"_batchId","nameLocation":"3358:8:45","nodeType":"VariableDeclaration","scope":50369,"src":"3350:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":50363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3350:7:45","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":50366,"mutability":"mutable","name":"_create","nameLocation":"3373:7:45","nodeType":"VariableDeclaration","scope":50369,"src":"3368:12:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":50365,"name":"bool","nodeType":"ElementaryTypeName","src":"3368:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3349:32:45"},"returnParameters":{"id":50368,"nodeType":"ParameterList","parameters":[],"src":"3390:0:45"},"scope":50376,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":50375,"nodeType":"FunctionDefinition","src":"4355:48:45","nodes":[],"documentation":{"id":50370,"nodeType":"StructuredDocumentation","src":"3397:953:45","text":"@notice Marks a batch as settled after yield distribution and enables user claiming\n @dev This function finalizes batch settlement by recording final asset values and enabling claims. Process:\n (1) Validates batch is closed and not already settled to prevent duplicate processing, (2) Snapshots both\n gross and net share prices at settlement time for accurate reward calculations, (3) Marks batch as settled\n enabling users to claim their staked shares or unstaked assets, (4) Completes the batch lifecycle allowing\n reward distribution through the claiming mechanism. Only kAssetRouter can settle batches as it coordinates\n yield calculations across DN vaults and manages cross-vault asset flows. Settlement triggers share price\n finalization based on vault performance during the batch period.\n @param _batchId The batch identifier to mark as settled (must be closed, not previously settled)"},"functionSelector":"eeb8f2b5","implemented":false,"kind":"function","modifiers":[],"name":"settleBatch","nameLocation":"4364:11:45","parameters":{"id":50373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50372,"mutability":"mutable","name":"_batchId","nameLocation":"4384:8:45","nodeType":"VariableDeclaration","scope":50375,"src":"4376:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":50371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4376:7:45","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4375:18:45"},"returnParameters":{"id":50374,"nodeType":"ParameterList","parameters":[],"src":"4402:0:45"},"scope":50376,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IVaultBatch","contractDependencies":[],"contractKind":"interface","documentation":{"id":50355,"nodeType":"StructuredDocumentation","src":"57:1111:45","text":"@title IVaultBatch\n @notice Interface for batch lifecycle management enabling gas-efficient settlement of multiple user operations\n @dev This interface defines the batch processing system that aggregates individual staking/unstaking requests\n for efficient settlement. The batch lifecycle consists of three distinct phases: (1) Open Phase: New requests\n can be added to the current batch, enabling users to join the settlement period, (2) Closed Phase: No new\n requests accepted, batch is prepared for settlement with final share price calculations, (3) Settled Phase:\n Assets distributed and share prices fixed, users can claim their rewards/redemptions. This system provides\n several key benefits: gas cost optimization through bulk processing, fair pricing through synchronized settlement,\n coordination with kAssetRouter for cross-vault yield distribution, and minimal proxy deployment for isolated\n asset distribution. The batch system is critical for maintaining protocol scalability while ensuring equitable\n treatment of all participants within each settlement period."},"fullyImplemented":false,"linearizedBaseContracts":[50376],"name":"IVaultBatch","nameLocation":"1178:11:45","scope":50377,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":45}